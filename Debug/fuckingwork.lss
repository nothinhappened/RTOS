
fuckingwork.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800200  00001bea  00001c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a39  008002c0  008002c0  00001d3e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d3e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003b0  00000000  00000000  00001d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000048f2  00000000  00000000  0000211e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001452  00000000  00000000  00006a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000247d  00000000  00000000  00007e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a28  00000000  00000000  0000a2e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001877  00000000  00000000  0000ad08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f90  00000000  00000000  0000c57f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000308  00000000  00000000  0000e50f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__vector_5>
      18:	b6 c0       	rjmp	.+364    	; 0x186 <__vector_6>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	8c c3       	rjmp	.+1816   	; 0x75e <__vector_17>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <__vector_36>
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	9f c0       	rjmp	.+318    	; 0x1e8 <__vector_42>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea ee       	ldi	r30, 0xEA	; 234
      fc:	fb e1       	ldi	r31, 0x1B	; 27
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3c       	cpi	r26, 0xC0	; 192
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2c e0       	ldi	r18, 0x0C	; 12
     110:	a0 ec       	ldi	r26, 0xC0	; 192
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a9 3f       	cpi	r26, 0xF9	; 249
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	68 d2       	rcall	.+1232   	; 0x5f0 <main>
     120:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <_Z7IR_initv>:
//Timer 4 runs signaling.
//Output on pin 10 (PB4/OC2A)
//Input on pin 3 (PE5/INT5)
void IR_init() {
	//PWM Timer 2
	DDRB |= (1<<PB4);	
     126:	24 9a       	sbi	0x04, 4	; 4
	TCCR2A = 0;
     128:	a0 eb       	ldi	r26, 0xB0	; 176
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	1c 92       	st	X, r1
	TCCR2B = 0;
     12e:	e1 eb       	ldi	r30, 0xB1	; 177
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	10 82       	st	Z, r1
	//Set to Fast PWM mode 15
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
     134:	8c 91       	ld	r24, X
     136:	83 60       	ori	r24, 0x03	; 3
     138:	8c 93       	st	X, r24
	TCCR2B |= (1<<WGM22);
     13a:	80 81       	ld	r24, Z
     13c:	88 60       	ori	r24, 0x08	; 8
     13e:	80 83       	st	Z, r24
	//No Prescaller
	TCCR2B |= (1<<CS20);
     140:	80 81       	ld	r24, Z
     142:	81 60       	ori	r24, 0x01	; 1
     144:	80 83       	st	Z, r24
	OCR1A=421;  //38khz
     146:	85 ea       	ldi	r24, 0xA5	; 165
     148:	91 e0       	ldi	r25, 0x01	; 1
     14a:	90 93 89 00 	sts	0x0089, r25
     14e:	80 93 88 00 	sts	0x0088, r24
	OCR1C = 210;//50% duty cycle
     152:	82 ed       	ldi	r24, 0xD2	; 210
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	90 93 8d 00 	sts	0x008D, r25
     15a:	80 93 8c 00 	sts	0x008C, r24
	
	//Interrupt Timer 4.
	TCCR4A = 0;
     15e:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4B = 0;
     162:	e1 ea       	ldi	r30, 0xA1	; 161
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	10 82       	st	Z, r1
	//Leave on normal mode.	
	//No prescaller
	TCCR4B |= (1<<CS40);
     168:	80 81       	ld	r24, Z
     16a:	81 60       	ori	r24, 0x01	; 1
     16c:	80 83       	st	Z, r24
	//Make sure interrupt is disabled until external interrupt
	TIMSK4 &= ~(1<<OCIE4A);
     16e:	e2 e7       	ldi	r30, 0x72	; 114
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	8d 7f       	andi	r24, 0xFD	; 253
     176:	80 83       	st	Z, r24
	

	//Setup the input interrupt on pin 3 (PE5/INT4)
	DDRE &= ~(1<<PE5);
     178:	6d 98       	cbi	0x0d, 5	; 13
	EICRB |= (1<<ISC51) | (1<<ISC50);
     17a:	ea e6       	ldi	r30, 0x6A	; 106
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	80 81       	ld	r24, Z
     180:	8c 60       	ori	r24, 0x0C	; 12
     182:	80 83       	st	Z, r24
     184:	08 95       	ret

00000186 <__vector_6>:
// 	EICRB |=
}


//Receiving a signal.
ISR(INT5_vect) {
     186:	1f 92       	push	r1
     188:	0f 92       	push	r0
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	0f 92       	push	r0
     18e:	11 24       	eor	r1, r1
     190:	0b b6       	in	r0, 0x3b	; 59
     192:	0f 92       	push	r0
     194:	8f 93       	push	r24
     196:	9f 93       	push	r25
     198:	ef 93       	push	r30
     19a:	ff 93       	push	r31
	if(!is_receiving) {
     19c:	80 91 c3 02 	lds	r24, 0x02C3
     1a0:	81 11       	cpse	r24, r1
     1a2:	17 c0       	rjmp	.+46     	; 0x1d2 <__vector_6+0x4c>
		//Start a new byte, start the timers.
		is_receiving = 1;
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	80 93 c3 02 	sts	0x02C3, r24
		currentBit = 0;
     1aa:	10 92 c1 02 	sts	0x02C1, r1
		currentByte = 0;
     1ae:	10 92 c0 02 	sts	0x02C0, r1
		//Clear any existing timer interrupts.
		TIFR4 |= (1<<OCF4A);
     1b2:	c9 9a       	sbi	0x19, 1	; 25
		//Delay by 1.5 bit lengths.
		OCR4A = TCNT4 + 12000;
     1b4:	80 91 a4 00 	lds	r24, 0x00A4
     1b8:	90 91 a5 00 	lds	r25, 0x00A5
     1bc:	80 52       	subi	r24, 0x20	; 32
     1be:	91 4d       	sbci	r25, 0xD1	; 209
     1c0:	90 93 a9 00 	sts	0x00A9, r25
     1c4:	80 93 a8 00 	sts	0x00A8, r24
		TIMSK4 |= (1<<OCIE4A);		
     1c8:	e2 e7       	ldi	r30, 0x72	; 114
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	82 60       	ori	r24, 0x02	; 2
     1d0:	80 83       	st	Z, r24
	}	
}
     1d2:	ff 91       	pop	r31
     1d4:	ef 91       	pop	r30
     1d6:	9f 91       	pop	r25
     1d8:	8f 91       	pop	r24
     1da:	0f 90       	pop	r0
     1dc:	0b be       	out	0x3b, r0	; 59
     1de:	0f 90       	pop	r0
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	0f 90       	pop	r0
     1e4:	1f 90       	pop	r1
     1e6:	18 95       	reti

000001e8 <__vector_42>:

//Read a new arriving signal.
ISR(TIMER4_COMPA_vect) {
     1e8:	1f 92       	push	r1
     1ea:	0f 92       	push	r0
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	0f 92       	push	r0
     1f0:	11 24       	eor	r1, r1
     1f2:	0b b6       	in	r0, 0x3b	; 59
     1f4:	0f 92       	push	r0
     1f6:	2f 93       	push	r18
     1f8:	3f 93       	push	r19
     1fa:	4f 93       	push	r20
     1fc:	5f 93       	push	r21
     1fe:	6f 93       	push	r22
     200:	7f 93       	push	r23
     202:	8f 93       	push	r24
     204:	9f 93       	push	r25
     206:	af 93       	push	r26
     208:	bf 93       	push	r27
     20a:	ef 93       	push	r30
     20c:	ff 93       	push	r31
	if(is_receiving) {
     20e:	80 91 c3 02 	lds	r24, 0x02C3
     212:	88 23       	and	r24, r24
     214:	79 f1       	breq	.+94     	; 0x274 <__vector_42+0x8c>
		if(PINE & (1<<PE4)) {
     216:	64 9b       	sbis	0x0c, 4	; 12
     218:	0e c0       	rjmp	.+28     	; 0x236 <__vector_42+0x4e>
			currentByte |= (1<<currentBit);
     21a:	30 91 c1 02 	lds	r19, 0x02C1
     21e:	20 91 c0 02 	lds	r18, 0x02C0
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	02 c0       	rjmp	.+4      	; 0x22c <__vector_42+0x44>
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	3a 95       	dec	r19
     22e:	e2 f7       	brpl	.-8      	; 0x228 <__vector_42+0x40>
     230:	82 2b       	or	r24, r18
     232:	80 93 c0 02 	sts	0x02C0, r24
		}
	
		++currentBit;
     236:	80 91 c1 02 	lds	r24, 0x02C1
     23a:	8f 5f       	subi	r24, 0xFF	; 255
     23c:	80 93 c1 02 	sts	0x02C1, r24
		OCR4A += 8000;
     240:	e8 ea       	ldi	r30, 0xA8	; 168
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	91 81       	ldd	r25, Z+1	; 0x01
     248:	80 5c       	subi	r24, 0xC0	; 192
     24a:	90 4e       	sbci	r25, 0xE0	; 224
     24c:	91 83       	std	Z+1, r25	; 0x01
     24e:	80 83       	st	Z, r24
	
		if(currentBit >= 8) {
     250:	80 91 c1 02 	lds	r24, 0x02C1
     254:	88 30       	cpi	r24, 0x08	; 8
     256:	80 f0       	brcs	.+32     	; 0x278 <__vector_42+0x90>
			is_receiving = 0;
     258:	10 92 c3 02 	sts	0x02C3, r1
			TIMSK4 &= ~(1<<OCIE4A);
     25c:	e2 e7       	ldi	r30, 0x72	; 114
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	8d 7f       	andi	r24, 0xFD	; 253
     264:	80 83       	st	Z, r24
			TIFR4 |= (1<<OCF4A);
     266:	c9 9a       	sbi	0x19, 1	; 25
			EIFR |= (1<<INTF4);
     268:	e4 9a       	sbi	0x1c, 4	; 28
			ir_rxhandler(currentByte);
     26a:	80 91 c0 02 	lds	r24, 0x02C0
     26e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_Z12ir_rxhandlerh>
     272:	02 c0       	rjmp	.+4      	; 0x278 <__vector_42+0x90>
		}
	}else if (is_transmitting) {
     274:	80 91 c2 02 	lds	r24, 0x02C2
		
	}
	
}
     278:	ff 91       	pop	r31
     27a:	ef 91       	pop	r30
     27c:	bf 91       	pop	r27
     27e:	af 91       	pop	r26
     280:	9f 91       	pop	r25
     282:	8f 91       	pop	r24
     284:	7f 91       	pop	r23
     286:	6f 91       	pop	r22
     288:	5f 91       	pop	r21
     28a:	4f 91       	pop	r20
     28c:	3f 91       	pop	r19
     28e:	2f 91       	pop	r18
     290:	0f 90       	pop	r0
     292:	0b be       	out	0x3b, r0	; 59
     294:	0f 90       	pop	r0
     296:	0f be       	out	0x3f, r0	; 63
     298:	0f 90       	pop	r0
     29a:	1f 90       	pop	r1
     29c:	18 95       	reti

0000029e <_Z15enable_interuptv>:


void enable_interupt() {
	//Clears existing interrupts.
	EIFR |= (1<<INTF4);
     29e:	e4 9a       	sbi	0x1c, 4	; 28
	EIMSK |= (1<<INT4);
     2a0:	ec 9a       	sbi	0x1d, 4	; 29
     2a2:	08 95       	ret

000002a4 <_Z16disable_interuptv>:
}

void disable_interupt() {
	EIMSK &= ~(1<<INT4);
     2a4:	ec 98       	cbi	0x1d, 4	; 29
	TIMSK4 &= ~(1<<OCIE4A);
     2a6:	e2 e7       	ldi	r30, 0x72	; 114
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	8d 7f       	andi	r24, 0xFD	; 253
     2ae:	80 83       	st	Z, r24
	TIFR4 |= (1<<OCF4A);
     2b0:	c9 9a       	sbi	0x19, 1	; 25
	is_receiving = 0;
     2b2:	10 92 c3 02 	sts	0x02C3, r1
     2b6:	08 95       	ret

000002b8 <_Z4markv>:
}

void mark() {
	TCCR2A |= (1<<COM2A1);;
     2b8:	e0 eb       	ldi	r30, 0xB0	; 176
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	80 68       	ori	r24, 0x80	; 128
     2c0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c2:	86 ea       	ldi	r24, 0xA6	; 166
     2c4:	8a 95       	dec	r24
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <_Z4markv+0xc>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <_Z4markv+0x12>
     2ca:	08 95       	ret

000002cc <_Z5spacev>:
//	PORTC |= (1 << PC2);
	_delay_us(500);
}
void space() {
	TCCR2A &= ~(1 << COM2A1);
     2cc:	e0 eb       	ldi	r30, 0xB0	; 176
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	8f 77       	andi	r24, 0x7F	; 127
     2d4:	80 83       	st	Z, r24
     2d6:	86 ea       	ldi	r24, 0xA6	; 166
     2d8:	8a 95       	dec	r24
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <_Z5spacev+0xc>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <_Z5spacev+0x12>
     2de:	08 95       	ret

000002e0 <_Z11IR_transmith>:
//	PORTC &= ~(1 << PC2);
	_delay_us(500);
}

void IR_transmit(uint8_t data) {
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	08 2f       	mov	r16, r24
	cli();
     2ea:	f8 94       	cli
	disable_interupt();
     2ec:	db df       	rcall	.-74     	; 0x2a4 <_Z16disable_interuptv>
	mark();
     2ee:	e4 df       	rcall	.-56     	; 0x2b8 <_Z4markv>
	space();
     2f0:	ed df       	rcall	.-38     	; 0x2cc <_Z5spacev>
	for(int i = 0; i < 8; i++) {
     2f2:	c0 e0       	ldi	r28, 0x00	; 0
     2f4:	d0 e0       	ldi	r29, 0x00	; 0
		if(((data >> i) & 0x1)) {
     2f6:	10 e0       	ldi	r17, 0x00	; 0
     2f8:	98 01       	movw	r18, r16
     2fa:	0c 2e       	mov	r0, r28
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <_Z11IR_transmith+0x22>
     2fe:	35 95       	asr	r19
     300:	27 95       	ror	r18
     302:	0a 94       	dec	r0
     304:	e2 f7       	brpl	.-8      	; 0x2fe <_Z11IR_transmith+0x1e>
     306:	20 ff       	sbrs	r18, 0
     308:	02 c0       	rjmp	.+4      	; 0x30e <_Z11IR_transmith+0x2e>
			mark();
     30a:	d6 df       	rcall	.-84     	; 0x2b8 <_Z4markv>
     30c:	01 c0       	rjmp	.+2      	; 0x310 <_Z11IR_transmith+0x30>
		} else {
			space();
     30e:	de df       	rcall	.-68     	; 0x2cc <_Z5spacev>
void IR_transmit(uint8_t data) {
	cli();
	disable_interupt();
	mark();
	space();
	for(int i = 0; i < 8; i++) {
     310:	21 96       	adiw	r28, 0x01	; 1
     312:	c8 30       	cpi	r28, 0x08	; 8
     314:	d1 05       	cpc	r29, r1
     316:	81 f7       	brne	.-32     	; 0x2f8 <_Z11IR_transmith+0x18>
			mark();
		} else {
			space();
		}
	}
	space();
     318:	d9 df       	rcall	.-78     	; 0x2cc <_Z5spacev>
	enable_interupt();
     31a:	c1 df       	rcall	.-126    	; 0x29e <_Z15enable_interuptv>
	sei();
     31c:	78 94       	sei
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	08 95       	ret

00000328 <_Z7OS_Initv>:
void Service_Publish( SERVICE *s, int16_t v ) {
	s->data = v;
	while (s->list_of_tasks_who_are_subscribed.head != NULL) {
		enqueue(&service_queue, dequeue(&s->list_of_tasks_who_are_subscribed));
	}
}
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	2c 97       	sbiw	r28, 0x0c	; 12
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	e1 e8       	ldi	r30, 0x81	; 129
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	82 60       	ori	r24, 0x02	; 2
     34c:	80 83       	st	Z, r24
     34e:	10 92 20 01 	sts	0x0120, r1
     352:	e1 e2       	ldi	r30, 0x21	; 33
     354:	f1 e0       	ldi	r31, 0x01	; 1
     356:	80 81       	ld	r24, Z
     358:	82 60       	ori	r24, 0x02	; 2
     35a:	80 83       	st	Z, r24
     35c:	9a d3       	rcall	.+1844   	; 0xa92 <initialize_dead_pool_queue>
     35e:	0f 2e       	mov	r0, r31
     360:	f5 e2       	ldi	r31, 0x25	; 37
     362:	ef 2e       	mov	r14, r31
     364:	fc e0       	ldi	r31, 0x0C	; 12
     366:	ff 2e       	mov	r15, r31
     368:	f0 2d       	mov	r31, r0
     36a:	8c ef       	ldi	r24, 0xFC	; 252
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	d7 01       	movw	r26, r14
     370:	11 96       	adiw	r26, 0x01	; 1
     372:	9c 93       	st	X, r25
     374:	8e 93       	st	-X, r24
     376:	09 e2       	ldi	r16, 0x29	; 41
     378:	1c e0       	ldi	r17, 0x0C	; 12
     37a:	f8 01       	movw	r30, r16
     37c:	10 82       	st	Z, r1
     37e:	10 d3       	rcall	.+1568   	; 0x9a0 <kernel_create_task>
     380:	84 e5       	ldi	r24, 0x54	; 84
     382:	9d e0       	ldi	r25, 0x0D	; 13
     384:	d7 01       	movw	r26, r14
     386:	11 96       	adiw	r26, 0x01	; 1
     388:	9c 93       	st	X, r25
     38a:	8e 93       	st	-X, r24
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	f8 01       	movw	r30, r16
     390:	80 83       	st	Z, r24
     392:	06 d3       	rcall	.+1548   	; 0x9a0 <kernel_create_task>
     394:	88 ed       	ldi	r24, 0xD8	; 216
     396:	92 e0       	ldi	r25, 0x02	; 2
     398:	90 93 21 0c 	sts	0x0C21, r25
     39c:	80 93 20 0c 	sts	0x0C20, r24
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	80 93 da 03 	sts	0x03DA, r24
     3a6:	80 ed       	ldi	r24, 0xD0	; 208
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	71 d2       	rcall	.+1250   	; 0x88e <dequeue>
     3ac:	ef e6       	ldi	r30, 0x6F	; 111
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	82 60       	ori	r24, 0x02	; 2
     3b4:	80 83       	st	Z, r24
     3b6:	e4 e8       	ldi	r30, 0x84	; 132
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	a0 e0       	ldi	r26, 0x00	; 0
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	89 87       	std	Y+9, r24	; 0x09
     3c4:	9a 87       	std	Y+10, r25	; 0x0a
     3c6:	ab 87       	std	Y+11, r26	; 0x0b
     3c8:	bc 87       	std	Y+12, r27	; 0x0c
     3ca:	81 e7       	ldi	r24, 0x71	; 113
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	a0 e0       	ldi	r26, 0x00	; 0
     3d0:	b0 e0       	ldi	r27, 0x00	; 0
     3d2:	8d 83       	std	Y+5, r24	; 0x05
     3d4:	9e 83       	std	Y+6, r25	; 0x06
     3d6:	af 83       	std	Y+7, r26	; 0x07
     3d8:	b8 87       	std	Y+8, r27	; 0x08
     3da:	89 85       	ldd	r24, Y+9	; 0x09
     3dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     3de:	ab 85       	ldd	r26, Y+11	; 0x0b
     3e0:	bc 85       	ldd	r27, Y+12	; 0x0c
     3e2:	4d 81       	ldd	r20, Y+5	; 0x05
     3e4:	5e 81       	ldd	r21, Y+6	; 0x06
     3e6:	6f 81       	ldd	r22, Y+7	; 0x07
     3e8:	78 85       	ldd	r23, Y+8	; 0x08
     3ea:	84 0f       	add	r24, r20
     3ec:	95 1f       	adc	r25, r21
     3ee:	a6 1f       	adc	r26, r22
     3f0:	b7 1f       	adc	r27, r23
     3f2:	89 83       	std	Y+1, r24	; 0x01
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	ab 83       	std	Y+3, r26	; 0x03
     3f8:	bc 83       	std	Y+4, r27	; 0x04
     3fa:	49 81       	ldd	r20, Y+1	; 0x01
     3fc:	5a 81       	ldd	r21, Y+2	; 0x02
     3fe:	6b 81       	ldd	r22, Y+3	; 0x03
     400:	7c 81       	ldd	r23, Y+4	; 0x04
     402:	28 e8       	ldi	r18, 0x88	; 136
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	d9 01       	movw	r26, r18
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	5c 93       	st	X, r21
     40c:	4e 93       	st	-X, r20
     40e:	80 81       	ld	r24, Z
     410:	91 81       	ldd	r25, Z+1	; 0x01
     412:	8f 58       	subi	r24, 0x8F	; 143
     414:	9d 4f       	sbci	r25, 0xFD	; 253
     416:	11 96       	adiw	r26, 0x01	; 1
     418:	9c 93       	st	X, r25
     41a:	8e 93       	st	-X, r24
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	86 bb       	out	0x16, r24	; 22
     420:	41 d4       	rcall	.+2178   	; 0xca4 <Scheduler_Init>
     422:	35 d4       	rcall	.+2154   	; 0xc8e <kernel_main_loop>
     424:	2c 96       	adiw	r28, 0x0c	; 12
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	08 95       	ret

0000043e <OS_Abort>:
     43e:	f8 94       	cli
     440:	80 ef       	ldi	r24, 0xF0	; 240
     442:	8a b9       	out	0x0a, r24	; 10
     444:	80 91 c6 02 	lds	r24, 0x02C6
     448:	00 91 c6 02 	lds	r16, 0x02C6
     44c:	0f 5f       	subi	r16, 0xFF	; 255
     44e:	0f 2e       	mov	r0, r31
     450:	f0 ef       	ldi	r31, 0xF0	; 240
     452:	cf 2e       	mov	r12, r31
     454:	f0 2d       	mov	r31, r0
     456:	0f 2e       	mov	r0, r31
     458:	f4 e6       	ldi	r31, 0x64	; 100
     45a:	df 2e       	mov	r13, r31
     45c:	f0 2d       	mov	r31, r0
     45e:	b1 2c       	mov	r11, r1
     460:	0f 2e       	mov	r0, r31
     462:	f0 e9       	ldi	r31, 0x90	; 144
     464:	ff 2e       	mov	r15, r31
     466:	f0 2d       	mov	r31, r0
     468:	1a e0       	ldi	r17, 0x0A	; 10
     46a:	0f 2e       	mov	r0, r31
     46c:	f4 e1       	ldi	r31, 0x14	; 20
     46e:	ef 2e       	mov	r14, r31
     470:	f0 2d       	mov	r31, r0
     472:	cb b8       	out	0x0b, r12	; 11
     474:	cd 2d       	mov	r28, r13
     476:	0f d4       	rcall	.+2078   	; 0xc96 <_delay_25ms>
     478:	c1 50       	subi	r28, 0x01	; 1
     47a:	e9 f7       	brne	.-6      	; 0x476 <OS_Abort+0x38>
     47c:	1b b8       	out	0x0b, r1	; 11
     47e:	c8 e2       	ldi	r28, 0x28	; 40
     480:	0a d4       	rcall	.+2068   	; 0xc96 <_delay_25ms>
     482:	c1 50       	subi	r28, 0x01	; 1
     484:	e9 f7       	brne	.-6      	; 0x480 <OS_Abort+0x42>
     486:	00 23       	and	r16, r16
     488:	99 f0       	breq	.+38     	; 0x4b0 <OS_Abort+0x72>
     48a:	db 2d       	mov	r29, r11
     48c:	fb b8       	out	0x0b, r15	; 11
     48e:	c1 2f       	mov	r28, r17
     490:	02 d4       	rcall	.+2052   	; 0xc96 <_delay_25ms>
     492:	c1 50       	subi	r28, 0x01	; 1
     494:	e9 f7       	brne	.-6      	; 0x490 <OS_Abort+0x52>
     496:	1b b8       	out	0x0b, r1	; 11
     498:	c1 2f       	mov	r28, r17
     49a:	fd d3       	rcall	.+2042   	; 0xc96 <_delay_25ms>
     49c:	c1 50       	subi	r28, 0x01	; 1
     49e:	e9 f7       	brne	.-6      	; 0x49a <OS_Abort+0x5c>
     4a0:	df 5f       	subi	r29, 0xFF	; 255
     4a2:	0d 13       	cpse	r16, r29
     4a4:	f3 cf       	rjmp	.-26     	; 0x48c <OS_Abort+0x4e>
     4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <OS_Abort+0x72>
     4a8:	f6 d3       	rcall	.+2028   	; 0xc96 <_delay_25ms>
     4aa:	c1 50       	subi	r28, 0x01	; 1
     4ac:	e9 f7       	brne	.-6      	; 0x4a8 <OS_Abort+0x6a>
     4ae:	e1 cf       	rjmp	.-62     	; 0x472 <OS_Abort+0x34>
     4b0:	ce 2d       	mov	r28, r14
     4b2:	fa cf       	rjmp	.-12     	; 0x4a8 <OS_Abort+0x6a>

000004b4 <Task_Create_Periodic>:
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	cf b7       	in	r28, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	90 93 26 0c 	sts	0x0C26, r25
     4c2:	80 93 25 0c 	sts	0x0C25, r24
     4c6:	70 93 28 0c 	sts	0x0C28, r23
     4ca:	60 93 27 0c 	sts	0x0C27, r22
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	80 93 29 0c 	sts	0x0C29, r24
     4d4:	50 93 2b 0c 	sts	0x0C2B, r21
     4d8:	40 93 2a 0c 	sts	0x0C2A, r20
     4dc:	30 93 2d 0c 	sts	0x0C2D, r19
     4e0:	20 93 2c 0c 	sts	0x0C2C, r18
     4e4:	10 93 2f 0c 	sts	0x0C2F, r17
     4e8:	00 93 2e 0c 	sts	0x0C2E, r16
     4ec:	80 93 24 0c 	sts	0x0C24, r24
     4f0:	dd d0       	rcall	.+442    	; 0x6ac <enter_kernel>
     4f2:	80 91 22 0c 	lds	r24, 0x0C22
     4f6:	90 91 23 0c 	lds	r25, 0x0C23
     4fa:	cf bf       	out	0x3f, r28	; 63
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	08 95       	ret

00000504 <Task_Create_System>:
     504:	cf 93       	push	r28
     506:	cf b7       	in	r28, 0x3f	; 63
     508:	f8 94       	cli
     50a:	90 93 26 0c 	sts	0x0C26, r25
     50e:	80 93 25 0c 	sts	0x0C25, r24
     512:	70 93 28 0c 	sts	0x0C28, r23
     516:	60 93 27 0c 	sts	0x0C27, r22
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	80 93 29 0c 	sts	0x0C29, r24
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	80 93 24 0c 	sts	0x0C24, r24
     526:	c2 d0       	rcall	.+388    	; 0x6ac <enter_kernel>
     528:	80 91 22 0c 	lds	r24, 0x0C22
     52c:	90 91 23 0c 	lds	r25, 0x0C23
     530:	cf bf       	out	0x3f, r28	; 63
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <Task_Create_RR>:
     536:	cf 93       	push	r28
     538:	cf b7       	in	r28, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	90 93 26 0c 	sts	0x0C26, r25
     540:	80 93 25 0c 	sts	0x0C25, r24
     544:	70 93 28 0c 	sts	0x0C28, r23
     548:	60 93 27 0c 	sts	0x0C27, r22
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	80 93 29 0c 	sts	0x0C29, r24
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	80 93 24 0c 	sts	0x0C24, r24
     558:	a9 d0       	rcall	.+338    	; 0x6ac <enter_kernel>
     55a:	80 91 22 0c 	lds	r24, 0x0C22
     55e:	90 91 23 0c 	lds	r25, 0x0C23
     562:	cf bf       	out	0x3f, r28	; 63
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <Task_Next>:
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	1f 92       	push	r1
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	8f b7       	in	r24, 0x3f	; 63
     574:	89 83       	std	Y+1, r24	; 0x01
     576:	f8 94       	cli
     578:	84 e0       	ldi	r24, 0x04	; 4
     57a:	80 93 24 0c 	sts	0x0C24, r24
     57e:	96 d0       	rcall	.+300    	; 0x6ac <enter_kernel>
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	8f bf       	out	0x3f, r24	; 63
     584:	0f 90       	pop	r0
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <Task_Terminate>:
     58c:	cf 93       	push	r28
     58e:	cf b7       	in	r28, 0x3f	; 63
     590:	f8 94       	cli
     592:	83 e0       	ldi	r24, 0x03	; 3
     594:	80 93 24 0c 	sts	0x0C24, r24
     598:	89 d0       	rcall	.+274    	; 0x6ac <enter_kernel>
     59a:	cf bf       	out	0x3f, r28	; 63
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <Now>:
  * Now() will wrap around every 65536 milliseconds. Therefore, for measurement
  * purposes, it should be used for durations less than 65 seconds.
  */
uint16_t Now() { // number of milliseconds since the RTOS boots.
	static uint16_t millies = 0;
	millies += TCNT5 / ((F_CPU / TIMER_PRESCALER) / 1000);
     5a0:	40 91 24 01 	lds	r20, 0x0124
     5a4:	50 91 25 01 	lds	r21, 0x0125
     5a8:	9a 01       	movw	r18, r20
     5aa:	a5 e2       	ldi	r26, 0x25	; 37
     5ac:	b6 e0       	ldi	r27, 0x06	; 6
     5ae:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__umulhisi3>
     5b2:	48 1b       	sub	r20, r24
     5b4:	59 0b       	sbc	r21, r25
     5b6:	56 95       	lsr	r21
     5b8:	47 95       	ror	r20
     5ba:	84 0f       	add	r24, r20
     5bc:	95 1f       	adc	r25, r21
     5be:	ac 01       	movw	r20, r24
     5c0:	00 24       	eor	r0, r0
     5c2:	44 0f       	add	r20, r20
     5c4:	55 1f       	adc	r21, r21
     5c6:	00 1c       	adc	r0, r0
     5c8:	44 0f       	add	r20, r20
     5ca:	55 1f       	adc	r21, r21
     5cc:	00 1c       	adc	r0, r0
     5ce:	45 2f       	mov	r20, r21
     5d0:	50 2d       	mov	r21, r0
     5d2:	80 91 c4 02 	lds	r24, 0x02C4
     5d6:	90 91 c5 02 	lds	r25, 0x02C5
     5da:	a0 e0       	ldi	r26, 0x00	; 0
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	84 0f       	add	r24, r20
     5e0:	95 1f       	adc	r25, r21
     5e2:	a1 1d       	adc	r26, r1
     5e4:	b1 1d       	adc	r27, r1
     5e6:	90 93 c5 02 	sts	0x02C5, r25
     5ea:	80 93 c4 02 	sts	0x02C4, r24
	return millies;
}
     5ee:	08 95       	ret

000005f0 <main>:
/**
 * Runtime entry point into the program; just start the RTOS.  The application layer must define r_main() for its entry point.
 */
int main()
{
	OS_Init();
     5f0:	9b de       	rcall	.-714    	; 0x328 <_Z7OS_Initv>
	return 0;
}
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	08 95       	ret

000005f8 <idle>:
 */
/**
 *  @brief The idle task does nothing but busy loop.
 */
void idle (void)
{
     5f8:	ff cf       	rjmp	.-2      	; 0x5f8 <idle>

000005fa <exit_kernel>:
{
    /*
     * The PC was pushed on the stack with the call to this function.
     * Now push on the I/O registers and the SREG as well.
     */
     SAVE_CTX();
     5fa:	ff 93       	push	r31
     5fc:	fc b7       	in	r31, 0x3c	; 60
     5fe:	ff 93       	push	r31
     600:	ff b7       	in	r31, 0x3f	; 63
     602:	f8 94       	cli
     604:	ff 93       	push	r31
     606:	ef 93       	push	r30
     608:	df 93       	push	r29
     60a:	cf 93       	push	r28
     60c:	bf 93       	push	r27
     60e:	af 93       	push	r26
     610:	9f 93       	push	r25
     612:	8f 93       	push	r24
     614:	7f 93       	push	r23
     616:	6f 93       	push	r22
     618:	5f 93       	push	r21
     61a:	4f 93       	push	r20
     61c:	3f 93       	push	r19
     61e:	2f 93       	push	r18
     620:	1f 93       	push	r17
     622:	0f 93       	push	r16
     624:	ff 92       	push	r15
     626:	ef 92       	push	r14
     628:	df 92       	push	r13
     62a:	cf 92       	push	r12
     62c:	bf 92       	push	r11
     62e:	af 92       	push	r10
     630:	9f 92       	push	r9
     632:	8f 92       	push	r8
     634:	7f 92       	push	r7
     636:	6f 92       	push	r6
     638:	5f 92       	push	r5
     63a:	4f 92       	push	r4
     63c:	3f 92       	push	r3
     63e:	2f 92       	push	r2
     640:	1f 92       	push	r1
     642:	0f 92       	push	r0

    /*
     * The last piece of the context is the SP. Save it to a variable.
     */
    kernel_sp = SP;
     644:	8d b7       	in	r24, 0x3d	; 61
     646:	9e b7       	in	r25, 0x3e	; 62
     648:	90 93 31 0c 	sts	0x0C31, r25
     64c:	80 93 30 0c 	sts	0x0C30, r24

    /*
     * Now restore the task's context, SP first.
     */
    SP = (uint16_t)(cur_task->sp);
     650:	e0 91 20 0c 	lds	r30, 0x0C20
     654:	f0 91 21 0c 	lds	r31, 0x0C21
     658:	f3 95       	inc	r31
     65a:	80 81       	ld	r24, Z
     65c:	91 81       	ldd	r25, Z+1	; 0x01
     65e:	9e bf       	out	0x3e, r25	; 62
     660:	8d bf       	out	0x3d, r24	; 61

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
     662:	0f 90       	pop	r0
     664:	1f 90       	pop	r1
     666:	2f 90       	pop	r2
     668:	3f 90       	pop	r3
     66a:	4f 90       	pop	r4
     66c:	5f 90       	pop	r5
     66e:	6f 90       	pop	r6
     670:	7f 90       	pop	r7
     672:	8f 90       	pop	r8
     674:	9f 90       	pop	r9
     676:	af 90       	pop	r10
     678:	bf 90       	pop	r11
     67a:	cf 90       	pop	r12
     67c:	df 90       	pop	r13
     67e:	ef 90       	pop	r14
     680:	ff 90       	pop	r15
     682:	0f 91       	pop	r16
     684:	1f 91       	pop	r17
     686:	2f 91       	pop	r18
     688:	3f 91       	pop	r19
     68a:	4f 91       	pop	r20
     68c:	5f 91       	pop	r21
     68e:	6f 91       	pop	r22
     690:	7f 91       	pop	r23
     692:	8f 91       	pop	r24
     694:	9f 91       	pop	r25
     696:	af 91       	pop	r26
     698:	bf 91       	pop	r27
     69a:	cf 91       	pop	r28
     69c:	df 91       	pop	r29
     69e:	ef 91       	pop	r30
     6a0:	ff 91       	pop	r31
     6a2:	ff bf       	out	0x3f, r31	; 63
     6a4:	ff 91       	pop	r31
     6a6:	fc bf       	out	0x3c, r31	; 60
     6a8:	ff 91       	pop	r31
     * enable them here.
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */
    asm volatile ("ret\n"::);
     6aa:	08 95       	ret

000006ac <enter_kernel>:
{
    /*
     * The PC was pushed on the stack with the call to this function.
     * Now push on the I/O registers and the SREG as well.
     */
    SAVE_CTX();
     6ac:	ff 93       	push	r31
     6ae:	fc b7       	in	r31, 0x3c	; 60
     6b0:	ff 93       	push	r31
     6b2:	ff b7       	in	r31, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	ff 93       	push	r31
     6b8:	ef 93       	push	r30
     6ba:	df 93       	push	r29
     6bc:	cf 93       	push	r28
     6be:	bf 93       	push	r27
     6c0:	af 93       	push	r26
     6c2:	9f 93       	push	r25
     6c4:	8f 93       	push	r24
     6c6:	7f 93       	push	r23
     6c8:	6f 93       	push	r22
     6ca:	5f 93       	push	r21
     6cc:	4f 93       	push	r20
     6ce:	3f 93       	push	r19
     6d0:	2f 93       	push	r18
     6d2:	1f 93       	push	r17
     6d4:	0f 93       	push	r16
     6d6:	ff 92       	push	r15
     6d8:	ef 92       	push	r14
     6da:	df 92       	push	r13
     6dc:	cf 92       	push	r12
     6de:	bf 92       	push	r11
     6e0:	af 92       	push	r10
     6e2:	9f 92       	push	r9
     6e4:	8f 92       	push	r8
     6e6:	7f 92       	push	r7
     6e8:	6f 92       	push	r6
     6ea:	5f 92       	push	r5
     6ec:	4f 92       	push	r4
     6ee:	3f 92       	push	r3
     6f0:	2f 92       	push	r2
     6f2:	1f 92       	push	r1
     6f4:	0f 92       	push	r0

    /*
     * The last piece of the context is the SP. Save it to a variable.
     */
    cur_task->sp = (uint8_t*)SP;
     6f6:	e0 91 20 0c 	lds	r30, 0x0C20
     6fa:	f0 91 21 0c 	lds	r31, 0x0C21
     6fe:	8d b7       	in	r24, 0x3d	; 61
     700:	9e b7       	in	r25, 0x3e	; 62
     702:	f3 95       	inc	r31
     704:	91 83       	std	Z+1, r25	; 0x01
     706:	80 83       	st	Z, r24

    /*
     * Now restore the kernel's context, SP first.
     */
    SP = kernel_sp;
     708:	80 91 30 0c 	lds	r24, 0x0C30
     70c:	90 91 31 0c 	lds	r25, 0x0C31
     710:	9e bf       	out	0x3e, r25	; 62
     712:	8d bf       	out	0x3d, r24	; 61

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
     714:	0f 90       	pop	r0
     716:	1f 90       	pop	r1
     718:	2f 90       	pop	r2
     71a:	3f 90       	pop	r3
     71c:	4f 90       	pop	r4
     71e:	5f 90       	pop	r5
     720:	6f 90       	pop	r6
     722:	7f 90       	pop	r7
     724:	8f 90       	pop	r8
     726:	9f 90       	pop	r9
     728:	af 90       	pop	r10
     72a:	bf 90       	pop	r11
     72c:	cf 90       	pop	r12
     72e:	df 90       	pop	r13
     730:	ef 90       	pop	r14
     732:	ff 90       	pop	r15
     734:	0f 91       	pop	r16
     736:	1f 91       	pop	r17
     738:	2f 91       	pop	r18
     73a:	3f 91       	pop	r19
     73c:	4f 91       	pop	r20
     73e:	5f 91       	pop	r21
     740:	6f 91       	pop	r22
     742:	7f 91       	pop	r23
     744:	8f 91       	pop	r24
     746:	9f 91       	pop	r25
     748:	af 91       	pop	r26
     74a:	bf 91       	pop	r27
     74c:	cf 91       	pop	r28
     74e:	df 91       	pop	r29
     750:	ef 91       	pop	r30
     752:	ff 91       	pop	r31
     754:	ff bf       	out	0x3f, r31	; 63
     756:	ff 91       	pop	r31
     758:	fc bf       	out	0x3c, r31	; 60
     75a:	ff 91       	pop	r31
     * return explicitly required as we are "naked".
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */
    asm volatile ("ret\n"::);
     75c:	08 95       	ret

0000075e <__vector_17>:
     * of SREG. We know it should have interrupts enabled because this
     * ISR was able to execute, but it has interrupts disabled because
     * it was stored while this ISR was executing. So we set the bit (I = bit 7)
     * in the stored value.
     */
    SAVE_CTX_TOP();
     75e:	ff 93       	push	r31
     760:	fc b7       	in	r31, 0x3c	; 60
     762:	ff 93       	push	r31
     764:	ff b7       	in	r31, 0x3f	; 63
     766:	f8 94       	cli

    STACK_SREG_SET_I_BIT();
     768:	f0 68       	ori	r31, 0x80	; 128

    SAVE_CTX_BOTTOM();
     76a:	ff 93       	push	r31
     76c:	ef 93       	push	r30
     76e:	df 93       	push	r29
     770:	cf 93       	push	r28
     772:	bf 93       	push	r27
     774:	af 93       	push	r26
     776:	9f 93       	push	r25
     778:	8f 93       	push	r24
     77a:	7f 93       	push	r23
     77c:	6f 93       	push	r22
     77e:	5f 93       	push	r21
     780:	4f 93       	push	r20
     782:	3f 93       	push	r19
     784:	2f 93       	push	r18
     786:	1f 93       	push	r17
     788:	0f 93       	push	r16
     78a:	ff 92       	push	r15
     78c:	ef 92       	push	r14
     78e:	df 92       	push	r13
     790:	cf 92       	push	r12
     792:	bf 92       	push	r11
     794:	af 92       	push	r10
     796:	9f 92       	push	r9
     798:	8f 92       	push	r8
     79a:	7f 92       	push	r7
     79c:	6f 92       	push	r6
     79e:	5f 92       	push	r5
     7a0:	4f 92       	push	r4
     7a2:	3f 92       	push	r3
     7a4:	2f 92       	push	r2
     7a6:	1f 92       	push	r1
     7a8:	0f 92       	push	r0

    cur_task->sp = (uint8_t*)SP;
     7aa:	e0 91 20 0c 	lds	r30, 0x0C20
     7ae:	f0 91 21 0c 	lds	r31, 0x0C21
     7b2:	8d b7       	in	r24, 0x3d	; 61
     7b4:	9e b7       	in	r25, 0x3e	; 62
     7b6:	f3 95       	inc	r31
     7b8:	91 83       	std	Z+1, r25	; 0x01
     7ba:	80 83       	st	Z, r24
    /*
     * Now that we already saved a copy of the stack pointer
     * for every context including the kernel, we can move to
     * the kernel stack and use it. We will restore it again later.
     */
    SP = kernel_sp;
     7bc:	80 91 30 0c 	lds	r24, 0x0C30
     7c0:	90 91 31 0c 	lds	r25, 0x0C31
     7c4:	9e bf       	out	0x3e, r25	; 62
     7c6:	8d bf       	out	0x3d, r24	; 61

    /*
     * Inform the kernel that this task was interrupted.
     */
    kernel_request = TIMER_EXPIRED;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	80 93 24 0c 	sts	0x0C24, r24

    /*
     * Prepare for next tick interrupt.
     */
    OCR1A += TICK_CYCLES;
     7ce:	e8 e8       	ldi	r30, 0x88	; 136
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	91 81       	ldd	r25, Z+1	; 0x01
     7d6:	8f 58       	subi	r24, 0x8F	; 143
     7d8:	9d 4f       	sbci	r25, 0xFD	; 253
     7da:	91 83       	std	Z+1, r25	; 0x01
     7dc:	80 83       	st	Z, r24

    /*
     * Restore the kernel context. (The stack pointer is restored again.)
     */
    SP = kernel_sp;
     7de:	80 91 30 0c 	lds	r24, 0x0C30
     7e2:	90 91 31 0c 	lds	r25, 0x0C31
     7e6:	9e bf       	out	0x3e, r25	; 62
     7e8:	8d bf       	out	0x3d, r24	; 61

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
     7ea:	0f 90       	pop	r0
     7ec:	1f 90       	pop	r1
     7ee:	2f 90       	pop	r2
     7f0:	3f 90       	pop	r3
     7f2:	4f 90       	pop	r4
     7f4:	5f 90       	pop	r5
     7f6:	6f 90       	pop	r6
     7f8:	7f 90       	pop	r7
     7fa:	8f 90       	pop	r8
     7fc:	9f 90       	pop	r9
     7fe:	af 90       	pop	r10
     800:	bf 90       	pop	r11
     802:	cf 90       	pop	r12
     804:	df 90       	pop	r13
     806:	ef 90       	pop	r14
     808:	ff 90       	pop	r15
     80a:	0f 91       	pop	r16
     80c:	1f 91       	pop	r17
     80e:	2f 91       	pop	r18
     810:	3f 91       	pop	r19
     812:	4f 91       	pop	r20
     814:	5f 91       	pop	r21
     816:	6f 91       	pop	r22
     818:	7f 91       	pop	r23
     81a:	8f 91       	pop	r24
     81c:	9f 91       	pop	r25
     81e:	af 91       	pop	r26
     820:	bf 91       	pop	r27
     822:	cf 91       	pop	r28
     824:	df 91       	pop	r29
     826:	ef 91       	pop	r30
     828:	ff 91       	pop	r31
     82a:	ff bf       	out	0x3f, r31	; 63
     82c:	ff 91       	pop	r31
     82e:	fc bf       	out	0x3c, r31	; 60
     830:	ff 91       	pop	r31
     * Explicitly required as we are "naked".
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */
    asm volatile ("ret\n"::);
     832:	08 95       	ret

00000834 <enqueue>:
 *
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
     834:	fc 01       	movw	r30, r24
    task_to_add->next = NULL;
     836:	db 01       	movw	r26, r22
     838:	aa 5f       	subi	r26, 0xFA	; 250
     83a:	be 4f       	sbci	r27, 0xFE	; 254
     83c:	1d 92       	st	X+, r1
     83e:	1c 92       	st	X, r1

    if(queue_ptr->head == NULL)
     840:	80 81       	ld	r24, Z
     842:	91 81       	ldd	r25, Z+1	; 0x01
     844:	89 2b       	or	r24, r25
     846:	29 f4       	brne	.+10     	; 0x852 <enqueue+0x1e>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
     848:	71 83       	std	Z+1, r23	; 0x01
     84a:	60 83       	st	Z, r22
        queue_ptr->tail = task_to_add;
     84c:	73 83       	std	Z+3, r23	; 0x03
     84e:	62 83       	std	Z+2, r22	; 0x02
     850:	08 95       	ret
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
     852:	a2 81       	ldd	r26, Z+2	; 0x02
     854:	b3 81       	ldd	r27, Z+3	; 0x03
     856:	aa 5f       	subi	r26, 0xFA	; 250
     858:	be 4f       	sbci	r27, 0xFE	; 254
     85a:	6d 93       	st	X+, r22
     85c:	7c 93       	st	X, r23
        queue_ptr->tail = task_to_add;
     85e:	73 83       	std	Z+3, r23	; 0x03
     860:	62 83       	std	Z+2, r22	; 0x02
     862:	08 95       	ret

00000864 <kernel_terminate_task>:
 * @brief Kernel function to destroy the current task.
 */
void kernel_terminate_task(void)
{
    /* deallocate all resources used by this task */
    cur_task->state = DEAD;
     864:	80 91 20 0c 	lds	r24, 0x0C20
     868:	90 91 21 0c 	lds	r25, 0x0C21
     86c:	fc 01       	movw	r30, r24
     86e:	ee 5f       	subi	r30, 0xFE	; 254
     870:	fe 4f       	sbci	r31, 0xFE	; 254
     872:	10 82       	st	Z, r1
    if(cur_task->level == PERIODIC)
     874:	33 96       	adiw	r30, 0x03	; 3
     876:	20 81       	ld	r18, Z
     878:	22 30       	cpi	r18, 0x02	; 2
     87a:	09 f4       	brne	.+2      	; 0x87e <kernel_terminate_task+0x1a>
    {
        Scheduler_StopTask(cur_task);
     87c:	47 d2       	rcall	.+1166   	; 0xd0c <Scheduler_StopTask>
    }
    enqueue(&dead_pool_queue, cur_task);
     87e:	60 91 20 0c 	lds	r22, 0x0C20
     882:	70 91 21 0c 	lds	r23, 0x0C21
     886:	88 ec       	ldi	r24, 0xC8	; 200
     888:	92 e0       	ldi	r25, 0x02	; 2
     88a:	d4 cf       	rjmp	.-88     	; 0x834 <enqueue>
     88c:	08 95       	ret

0000088e <dequeue>:
 *
 * @param queue_ptr the queue to pop
 * @return the popped task descriptor
 */
task_descriptor_t* dequeue(queue_t* queue_ptr)
{
     88e:	fc 01       	movw	r30, r24
    task_descriptor_t* task_ptr = queue_ptr->head;
     890:	80 81       	ld	r24, Z
     892:	91 81       	ldd	r25, Z+1	; 0x01

    if(queue_ptr->head != NULL)
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	51 f0       	breq	.+20     	; 0x8ac <dequeue+0x1e>
    {
        queue_ptr->head = queue_ptr->head->next;
     898:	dc 01       	movw	r26, r24
     89a:	aa 5f       	subi	r26, 0xFA	; 250
     89c:	be 4f       	sbci	r27, 0xFE	; 254
     89e:	2d 91       	ld	r18, X+
     8a0:	3c 91       	ld	r19, X
     8a2:	11 97       	sbiw	r26, 0x01	; 1
     8a4:	31 83       	std	Z+1, r19	; 0x01
     8a6:	20 83       	st	Z, r18
        task_ptr->next = NULL;
     8a8:	1d 92       	st	X+, r1
     8aa:	1c 92       	st	X, r1
    }

    return task_ptr;
}
     8ac:	08 95       	ret

000008ae <kernel_dispatch>:
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */

    if(cur_task->state != RUNNING || cur_task == idle_task)
     8ae:	80 91 20 0c 	lds	r24, 0x0C20
     8b2:	90 91 21 0c 	lds	r25, 0x0C21
     8b6:	fc 01       	movw	r30, r24
     8b8:	ee 5f       	subi	r30, 0xFE	; 254
     8ba:	fe 4f       	sbci	r31, 0xFE	; 254
     8bc:	20 81       	ld	r18, Z
     8be:	21 30       	cpi	r18, 0x01	; 1
     8c0:	41 f4       	brne	.+16     	; 0x8d2 <kernel_dispatch+0x24>
     8c2:	20 91 1b 02 	lds	r18, 0x021B
     8c6:	30 91 1c 02 	lds	r19, 0x021C
     8ca:	82 17       	cp	r24, r18
     8cc:	93 07       	cpc	r25, r19
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <kernel_dispatch+0x24>
     8d0:	66 c0       	rjmp	.+204    	; 0x99e <kernel_dispatch+0xf0>
    {
		// look for tasks waiting on a published service
		if(service_queue.head != NULL) {
     8d2:	80 91 cc 02 	lds	r24, 0x02CC
     8d6:	90 91 cd 02 	lds	r25, 0x02CD
     8da:	89 2b       	or	r24, r25
     8dc:	41 f0       	breq	.+16     	; 0x8ee <kernel_dispatch+0x40>
			cur_task = dequeue(&service_queue);
     8de:	8c ec       	ldi	r24, 0xCC	; 204
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	d5 df       	rcall	.-86     	; 0x88e <dequeue>
     8e4:	90 93 21 0c 	sts	0x0C21, r25
     8e8:	80 93 20 0c 	sts	0x0C20, r24
     8ec:	50 c0       	rjmp	.+160    	; 0x98e <kernel_dispatch+0xe0>
		}
		
		else if(system_queue.head != NULL)
     8ee:	80 91 d0 02 	lds	r24, 0x02D0
     8f2:	90 91 d1 02 	lds	r25, 0x02D1
     8f6:	89 2b       	or	r24, r25
     8f8:	41 f0       	breq	.+16     	; 0x90a <kernel_dispatch+0x5c>
        {
            cur_task = dequeue(&system_queue);
     8fa:	80 ed       	ldi	r24, 0xD0	; 208
     8fc:	92 e0       	ldi	r25, 0x02	; 2
     8fe:	c7 df       	rcall	.-114    	; 0x88e <dequeue>
     900:	90 93 21 0c 	sts	0x0C21, r25
     904:	80 93 20 0c 	sts	0x0C20, r24
     908:	42 c0       	rjmp	.+132    	; 0x98e <kernel_dispatch+0xe0>
        }
        // HOW TO PROCEED: check if there are any period tasks and then set them to running (run them).
        // let them run to completion -- 
        // have an array of Periodic tasks		
		/* periodic tasks must set iteration_complete to zero when they have completed whatever they do -- otherwise the system will fail when the task over-runs the wcet. */
		else if(periodic_task->iteration_complete == 0) {
     90a:	e0 91 19 02 	lds	r30, 0x0219
     90e:	f0 91 1a 02 	lds	r31, 0x021A
     912:	87 81       	ldd	r24, Z+7	; 0x07
     914:	81 11       	cpse	r24, r1
     916:	12 c0       	rjmp	.+36     	; 0x93c <kernel_dispatch+0x8e>
			if(Scheduler_Dispatch() != 0 ) {
     918:	fa d1       	rcall	.+1012   	; 0xd0e <Scheduler_Dispatch>
     91a:	89 2b       	or	r24, r25
     91c:	21 f0       	breq	.+8      	; 0x926 <kernel_dispatch+0x78>
				// this is probably a bad situation, because there is a periodic task running and another is ready to run X_X
				error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	80 93 32 0c 	sts	0x0C32, r24
				OS_Abort();
     924:	8c dd       	rcall	.-1256   	; 0x43e <OS_Abort>
			}
			// if the current periodic task is still running, let it run
			cur_task = periodic_task->descriptor;
     926:	e0 91 19 02 	lds	r30, 0x0219
     92a:	f0 91 1a 02 	lds	r31, 0x021A
     92e:	82 85       	ldd	r24, Z+10	; 0x0a
     930:	93 85       	ldd	r25, Z+11	; 0x0b
     932:	90 93 21 0c 	sts	0x0C21, r25
     936:	80 93 20 0c 	sts	0x0C20, r24
     93a:	29 c0       	rjmp	.+82     	; 0x98e <kernel_dispatch+0xe0>
		}
		/* Let's see if there is a different periodic task which is ready to run! */
        else if( Scheduler_Dispatch() == 0 ) {
     93c:	e8 d1       	rcall	.+976    	; 0xd0e <Scheduler_Dispatch>
     93e:	89 2b       	or	r24, r25
     940:	81 f4       	brne	.+32     	; 0x962 <kernel_dispatch+0xb4>
			periodic_task = Scheduler_GetTask();
     942:	54 d2       	rcall	.+1192   	; 0xdec <Scheduler_GetTask>
     944:	90 93 1a 02 	sts	0x021A, r25
     948:	80 93 19 02 	sts	0x0219, r24
			// setting the ticks_remaining value here from the periodic task's wcet.
			ticks_remaining = periodic_task->wcet;
     94c:	fc 01       	movw	r30, r24
     94e:	24 81       	ldd	r18, Z+4	; 0x04
     950:	20 93 c7 02 	sts	0x02C7, r18
			cur_task = periodic_task->descriptor;
     954:	82 85       	ldd	r24, Z+10	; 0x0a
     956:	93 85       	ldd	r25, Z+11	; 0x0b
     958:	90 93 21 0c 	sts	0x0C21, r25
     95c:	80 93 20 0c 	sts	0x0C20, r24
     960:	16 c0       	rjmp	.+44     	; 0x98e <kernel_dispatch+0xe0>
        }
        else if(rr_queue.head != NULL)
     962:	80 91 d4 02 	lds	r24, 0x02D4
     966:	90 91 d5 02 	lds	r25, 0x02D5
     96a:	89 2b       	or	r24, r25
     96c:	41 f0       	breq	.+16     	; 0x97e <kernel_dispatch+0xd0>
        {
            cur_task = dequeue(&rr_queue);
     96e:	84 ed       	ldi	r24, 0xD4	; 212
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	8d df       	rcall	.-230    	; 0x88e <dequeue>
     974:	90 93 21 0c 	sts	0x0C21, r25
     978:	80 93 20 0c 	sts	0x0C20, r24
     97c:	08 c0       	rjmp	.+16     	; 0x98e <kernel_dispatch+0xe0>
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
     97e:	80 91 1b 02 	lds	r24, 0x021B
     982:	90 91 1c 02 	lds	r25, 0x021C
     986:	90 93 21 0c 	sts	0x0C21, r25
     98a:	80 93 20 0c 	sts	0x0C20, r24
        }

        cur_task->state = RUNNING;
     98e:	e0 91 20 0c 	lds	r30, 0x0C20
     992:	f0 91 21 0c 	lds	r31, 0x0C21
     996:	ee 5f       	subi	r30, 0xFE	; 254
     998:	fe 4f       	sbci	r31, 0xFE	; 254
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 83       	st	Z, r24
     99e:	08 95       	ret

000009a0 <kernel_create_task>:
 * it has called "enter_kernel()"; so that when we switch to it later, we
 * can just restore its execution context on its stack.
 * @sa enter_kernel
 */
int kernel_create_task()
{
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
    /* The new task. */
    task_descriptor_t *p;
    uint8_t* stack_bottom;

    if (dead_pool_queue.head == NULL)
     9a4:	80 91 c8 02 	lds	r24, 0x02C8
     9a8:	90 91 c9 02 	lds	r25, 0x02C9
     9ac:	89 2b       	or	r24, r25
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <kernel_create_task+0x12>
     9b0:	68 c0       	rjmp	.+208    	; 0xa82 <kernel_create_task+0xe2>
        /* Too many tasks! */
        return 0;
    }

	/* idling "task" goes in last descriptor. */
	if(kernel_request_create_args.level == NULL)
     9b2:	80 91 29 0c 	lds	r24, 0x0C29
     9b6:	88 23       	and	r24, r24
     9b8:	21 f0       	breq	.+8      	; 0x9c2 <kernel_create_task+0x22>
		p = &task_desc[MAXPROCESS];
	}
	/* Find an unused descriptor. */
	else
	{
	    p = dequeue(&dead_pool_queue);
     9ba:	88 ec       	ldi	r24, 0xC8	; 200
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	67 df       	rcall	.-306    	; 0x88e <dequeue>
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <kernel_create_task+0x26>
    }

	/* idling "task" goes in last descriptor. */
	if(kernel_request_create_args.level == NULL)
	{
		p = &task_desc[MAXPROCESS];
     9c2:	88 e1       	ldi	r24, 0x18	; 24
     9c4:	9b e0       	ldi	r25, 0x0B	; 11
    /* Not necessary to clear the task descriptor. */
    /* memset(p,0,sizeof(task_descriptor_t)); */

    /* stack_top[0] is the byte above the stack.
     * stack_top[1] is r0. */
    stack_top[2] = (uint8_t) 0; /* r1 is the "zero" register. */
     9c6:	fc 01       	movw	r30, r24
     9c8:	e7 52       	subi	r30, 0x27	; 39
     9ca:	ff 4f       	sbci	r31, 0xFF	; 255
     9cc:	10 82       	st	Z, r1
    /* stack_top[31] is r30. */
    stack_top[32] = (uint8_t) _BV(SREG_I); /* set SREG_I bit in stored SREG. */
     9ce:	20 e8       	ldi	r18, 0x80	; 128
     9d0:	7e 96       	adiw	r30, 0x1e	; 30
     9d2:	20 83       	st	Z, r18
     * onto the stack in reverse byte order (least significant first, followed
     * by most significant).  This is because the "return" assembly instructions
     * (ret and reti) pop addresses off in BIG ENDIAN (most sig. first, least sig.
     * second), even though the AT90 is LITTLE ENDIAN machine.
     */
	stack_top[35] = 0; // FIXME: this should probably be something more than just zero
     9d4:	33 96       	adiw	r30, 0x03	; 3
     9d6:	10 82       	st	Z, r1
    stack_top[36] = (uint8_t)((uint16_t)(kernel_request_create_args.f) >> 8);
     9d8:	e5 e2       	ldi	r30, 0x25	; 37
     9da:	fc e0       	ldi	r31, 0x0C	; 12
     9dc:	20 81       	ld	r18, Z
     9de:	31 81       	ldd	r19, Z+1	; 0x01
     9e0:	dc 01       	movw	r26, r24
     9e2:	a5 50       	subi	r26, 0x05	; 5
     9e4:	bf 4f       	sbci	r27, 0xFF	; 255
     9e6:	3c 93       	st	X, r19
    stack_top[37] = (uint8_t)(uint16_t)(kernel_request_create_args.f);
     9e8:	20 81       	ld	r18, Z
     9ea:	31 81       	ldd	r19, Z+1	; 0x01
     9ec:	fc 01       	movw	r30, r24
     9ee:	e4 50       	subi	r30, 0x04	; 4
     9f0:	ff 4f       	sbci	r31, 0xFF	; 255
     9f2:	20 83       	st	Z, r18
	stack_top[38] = 0; // FIXME: this should probably be something more than just zero
     9f4:	31 96       	adiw	r30, 0x01	; 1
     9f6:	10 82       	st	Z, r1
    stack_top[39] = (uint8_t)((uint16_t)Task_Terminate >> 8);
     9f8:	26 ec       	ldi	r18, 0xC6	; 198
     9fa:	32 e0       	ldi	r19, 0x02	; 2
     9fc:	31 96       	adiw	r30, 0x01	; 1
     9fe:	30 83       	st	Z, r19
    stack_top[40] = (uint8_t)(uint16_t)Task_Terminate;
     a00:	31 96       	adiw	r30, 0x01	; 1
     a02:	20 83       	st	Z, r18

    /*
     * Make stack pointer point to cell above stack (the top).
     * Make room for 32 registers, SREG and two return addresses.
     */
    p->sp = stack_top;
     a04:	31 96       	adiw	r30, 0x01	; 1
     a06:	9c 01       	movw	r18, r24
     a08:	29 52       	subi	r18, 0x29	; 41
     a0a:	3f 4f       	sbci	r19, 0xFF	; 255
     a0c:	31 83       	std	Z+1, r19	; 0x01
     a0e:	20 83       	st	Z, r18

    p->state = READY;
     a10:	22 e0       	ldi	r18, 0x02	; 2
     a12:	32 96       	adiw	r30, 0x02	; 2
     a14:	20 83       	st	Z, r18
    p->arg = kernel_request_create_args.arg;
     a16:	20 91 27 0c 	lds	r18, 0x0C27
     a1a:	30 91 28 0c 	lds	r19, 0x0C28
     a1e:	31 96       	adiw	r30, 0x01	; 1
     a20:	31 83       	std	Z+1, r19	; 0x01
     a22:	20 83       	st	Z, r18
    p->level = kernel_request_create_args.level;
     a24:	e9 e2       	ldi	r30, 0x29	; 41
     a26:	fc e0       	ldi	r31, 0x0C	; 12
     a28:	20 81       	ld	r18, Z
     a2a:	1a 96       	adiw	r26, 0x0a	; 10
     a2c:	2c 93       	st	X, r18

	switch(kernel_request_create_args.level)
     a2e:	20 81       	ld	r18, Z
     a30:	22 30       	cpi	r18, 0x02	; 2
     a32:	29 f0       	breq	.+10     	; 0xa3e <kernel_create_task+0x9e>
     a34:	23 30       	cpi	r18, 0x03	; 3
     a36:	b9 f0       	breq	.+46     	; 0xa66 <kernel_create_task+0xc6>
     a38:	21 30       	cpi	r18, 0x01	; 1
     a3a:	31 f5       	brne	.+76     	; 0xa88 <kernel_create_task+0xe8>
     a3c:	1b c0       	rjmp	.+54     	; 0xa74 <kernel_create_task+0xd4>
	{
	case PERIODIC:
		/* Put this newly created periodic task into the periodic scheduler */
        Scheduler_StartTask(p, kernel_request_create_args.start, kernel_request_create_args.period, kernel_request_create_args.wcet, kernel_request_create_args.f);
     a3e:	00 91 25 0c 	lds	r16, 0x0C25
     a42:	10 91 26 0c 	lds	r17, 0x0C26
     a46:	20 91 2c 0c 	lds	r18, 0x0C2C
     a4a:	30 91 2d 0c 	lds	r19, 0x0C2D
     a4e:	40 91 2a 0c 	lds	r20, 0x0C2A
     a52:	50 91 2b 0c 	lds	r21, 0x0C2B
     a56:	60 91 2e 0c 	lds	r22, 0x0C2E
     a5a:	70 91 2f 0c 	lds	r23, 0x0C2F
     a5e:	28 d1       	rcall	.+592    	; 0xcb0 <Scheduler_StartTask>
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
	switch(kernel_request_create_args.level)
	{
	case PERIODIC:
		/* Put this newly created periodic task into the periodic scheduler */
        Scheduler_StartTask(p, kernel_request_create_args.start, kernel_request_create_args.period, kernel_request_create_args.wcet, kernel_request_create_args.f);
		break;
     a64:	13 c0       	rjmp	.+38     	; 0xa8c <kernel_create_task+0xec>

    case SYSTEM:
    	/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&system_queue, p);
     a66:	bc 01       	movw	r22, r24
     a68:	80 ed       	ldi	r24, 0xD0	; 208
     a6a:	92 e0       	ldi	r25, 0x02	; 2
     a6c:	e3 de       	rcall	.-570    	; 0x834 <enqueue>
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
		break;

    case SYSTEM:
    	/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&system_queue, p);
		break;
     a72:	0c c0       	rjmp	.+24     	; 0xa8c <kernel_create_task+0xec>

    case RR:
		/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&rr_queue, p);
     a74:	bc 01       	movw	r22, r24
     a76:	84 ed       	ldi	r24, 0xD4	; 212
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	dc de       	rcall	.-584    	; 0x834 <enqueue>
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
		break;

    case RR:
		/* Put SYSTEM and Round Robin tasks on a queue. */
        enqueue(&rr_queue, p);
		break;
     a80:	05 c0       	rjmp	.+10     	; 0xa8c <kernel_create_task+0xec>
    uint8_t* stack_bottom;

    if (dead_pool_queue.head == NULL)
    {
        /* Too many tasks! */
        return 0;
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <kernel_create_task+0xec>
		/* idle task does not go in a queue */
		break;
	}


    return 1;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	90 e0       	ldi	r25, 0x00	; 0
}
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <initialize_dead_pool_queue>:
    }

    return task_ptr;
}

void initialize_dead_pool_queue() {
     a92:	ea ed       	ldi	r30, 0xDA	; 218
     a94:	f3 e0       	ldi	r31, 0x03	; 3
     a96:	22 e1       	ldi	r18, 0x12	; 18
     a98:	3b e0       	ldi	r19, 0x0B	; 11
	int i;
	for (i = 0; i < MAXPROCESS - 1; i++)
	{
		task_desc[i].state = DEAD;
     a9a:	10 82       	st	Z, r1
     a9c:	cf 01       	movw	r24, r30
     a9e:	06 96       	adiw	r24, 0x06	; 6
		task_desc[i].next = &task_desc[i + 1];
     aa0:	95 83       	std	Z+5, r25	; 0x05
     aa2:	84 83       	std	Z+4, r24	; 0x04
     aa4:	e8 5f       	subi	r30, 0xF8	; 248
     aa6:	fe 4f       	sbci	r31, 0xFE	; 254
    return task_ptr;
}

void initialize_dead_pool_queue() {
	int i;
	for (i = 0; i < MAXPROCESS - 1; i++)
     aa8:	e2 17       	cp	r30, r18
     aaa:	f3 07       	cpc	r31, r19
     aac:	b1 f7       	brne	.-20     	; 0xa9a <initialize_dead_pool_queue+0x8>
	{
		task_desc[i].state = DEAD;
		task_desc[i].next = &task_desc[i + 1];
	}
	task_desc[MAXPROCESS - 1].next = NULL;
     aae:	10 92 17 0b 	sts	0x0B17, r1
     ab2:	10 92 16 0b 	sts	0x0B16, r1
	dead_pool_queue.head = &task_desc[0];
     ab6:	88 ed       	ldi	r24, 0xD8	; 216
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	90 93 c9 02 	sts	0x02C9, r25
     abe:	80 93 c8 02 	sts	0x02C8, r24
	dead_pool_queue.tail = &task_desc[MAXPROCESS - 1];
     ac2:	80 e1       	ldi	r24, 0x10	; 16
     ac4:	9a e0       	ldi	r25, 0x0A	; 10
     ac6:	90 93 cb 02 	sts	0x02CB, r25
     aca:	80 93 ca 02 	sts	0x02CA, r24
     ace:	08 95       	ret

00000ad0 <kernel_update_ticker>:
 * Perhaps move to the next time slot of the PPP.
 */
void kernel_update_ticker(void)
{
    /* PORTD ^= LED_D5_RED; */
	if(periodic_task->iteration_complete == 0) {
     ad0:	e0 91 19 02 	lds	r30, 0x0219
     ad4:	f0 91 1a 02 	lds	r31, 0x021A
     ad8:	87 81       	ldd	r24, Z+7	; 0x07
     ada:	81 11       	cpse	r24, r1
     adc:	18 c0       	rjmp	.+48     	; 0xb0e <kernel_update_ticker+0x3e>
		// I think we can set ticks_remaining when we start a periodic task -- using the wcet value.
		--ticks_remaining;
     ade:	80 91 c7 02 	lds	r24, 0x02C7
     ae2:	81 50       	subi	r24, 0x01	; 1
     ae4:	80 93 c7 02 	sts	0x02C7, r24

		if(ticks_remaining == 0)
     ae8:	80 91 c7 02 	lds	r24, 0x02C7
     aec:	81 11       	cpse	r24, r1
     aee:	0f c0       	rjmp	.+30     	; 0xb0e <kernel_update_ticker+0x3e>
		{
			/* If Periodic task still running then error */
			if(cur_task != NULL && cur_task->level == PERIODIC && periodic_task->iteration_complete == 0)
     af0:	80 91 20 0c 	lds	r24, 0x0C20
     af4:	90 91 21 0c 	lds	r25, 0x0C21
     af8:	00 97       	sbiw	r24, 0x00	; 0
     afa:	49 f0       	breq	.+18     	; 0xb0e <kernel_update_ticker+0x3e>
     afc:	fc 01       	movw	r30, r24
     afe:	eb 5f       	subi	r30, 0xFB	; 251
     b00:	fe 4f       	sbci	r31, 0xFE	; 254
     b02:	80 81       	ld	r24, Z
     b04:	82 30       	cpi	r24, 0x02	; 2
     b06:	19 f4       	brne	.+6      	; 0xb0e <kernel_update_ticker+0x3e>
			{
				/* error handling */
				error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
     b08:	80 93 32 0c 	sts	0x0C32, r24
				OS_Abort();
     b0c:	98 cc       	rjmp	.-1744   	; 0x43e <OS_Abort>
     b0e:	08 95       	ret

00000b10 <kernel_handle_request>:
 * Perform some action based on the system call or timer tick.
 * Perhaps place the current process in a ready or waiting queue.
 */
void kernel_handle_request(void)
{
   switch(kernel_request)
     b10:	80 91 24 0c 	lds	r24, 0x0C24
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	39 f1       	breq	.+78     	; 0xb66 <kernel_handle_request+0x56>
     b18:	30 f4       	brcc	.+12     	; 0xb26 <kernel_handle_request+0x16>
     b1a:	88 23       	and	r24, r24
     b1c:	09 f4       	brne	.+2      	; 0xb20 <kernel_handle_request+0x10>
     b1e:	a3 c0       	rjmp	.+326    	; 0xc66 <kernel_handle_request+0x156>
     b20:	81 30       	cpi	r24, 0x01	; 1
     b22:	51 f0       	breq	.+20     	; 0xb38 <kernel_handle_request+0x28>
     b24:	9c c0       	rjmp	.+312    	; 0xc5e <kernel_handle_request+0x14e>
     b26:	84 30       	cpi	r24, 0x04	; 4
     b28:	09 f4       	brne	.+2      	; 0xb2c <kernel_handle_request+0x1c>
     b2a:	67 c0       	rjmp	.+206    	; 0xbfa <kernel_handle_request+0xea>
     b2c:	08 f4       	brcc	.+2      	; 0xb30 <kernel_handle_request+0x20>
     b2e:	58 c0       	rjmp	.+176    	; 0xbe0 <kernel_handle_request+0xd0>
     b30:	85 30       	cpi	r24, 0x05	; 5
     b32:	09 f4       	brne	.+2      	; 0xb36 <kernel_handle_request+0x26>
     b34:	98 c0       	rjmp	.+304    	; 0xc66 <kernel_handle_request+0x156>
     b36:	93 c0       	rjmp	.+294    	; 0xc5e <kernel_handle_request+0x14e>
    case NONE:
        /* Should not happen. */
        break;

    case TIMER_EXPIRED:
        kernel_update_ticker();
     b38:	cb df       	rcall	.-106    	; 0xad0 <kernel_update_ticker>

        /* Round robin tasks get pre-empted on every tick. */
        if(cur_task->level == RR && cur_task->state == RUNNING)
     b3a:	60 91 20 0c 	lds	r22, 0x0C20
     b3e:	70 91 21 0c 	lds	r23, 0x0C21
     b42:	fb 01       	movw	r30, r22
     b44:	eb 5f       	subi	r30, 0xFB	; 251
     b46:	fe 4f       	sbci	r31, 0xFE	; 254
     b48:	80 81       	ld	r24, Z
     b4a:	81 30       	cpi	r24, 0x01	; 1
     b4c:	09 f0       	breq	.+2      	; 0xb50 <kernel_handle_request+0x40>
     b4e:	8b c0       	rjmp	.+278    	; 0xc66 <kernel_handle_request+0x156>
     b50:	33 97       	sbiw	r30, 0x03	; 3
     b52:	80 81       	ld	r24, Z
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	09 f0       	breq	.+2      	; 0xb5a <kernel_handle_request+0x4a>
     b58:	86 c0       	rjmp	.+268    	; 0xc66 <kernel_handle_request+0x156>
        {
            cur_task->state = READY;
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	80 83       	st	Z, r24
            enqueue(&rr_queue, cur_task);
     b5e:	84 ed       	ldi	r24, 0xD4	; 212
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	68 de       	rcall	.-816    	; 0x834 <enqueue>
     b64:	80 c0       	rjmp	.+256    	; 0xc66 <kernel_handle_request+0x156>
        }
        break;

    case TASK_CREATE:
        kernel_request_retval = kernel_create_task();
     b66:	1c df       	rcall	.-456    	; 0x9a0 <kernel_create_task>
     b68:	90 93 23 0c 	sts	0x0C23, r25
     b6c:	80 93 22 0c 	sts	0x0C22, r24

        /* Check if new task has higher priority, and that it wasn't an ISR
         * making the request.
         */
        if(kernel_request_retval)
     b70:	80 91 22 0c 	lds	r24, 0x0C22
     b74:	90 91 23 0c 	lds	r25, 0x0C23
     b78:	89 2b       	or	r24, r25
     b7a:	09 f4       	brne	.+2      	; 0xb7e <kernel_handle_request+0x6e>
     b7c:	74 c0       	rjmp	.+232    	; 0xc66 <kernel_handle_request+0x156>
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
     b7e:	80 91 29 0c 	lds	r24, 0x0C29
     b82:	83 30       	cpi	r24, 0x03	; 3
     b84:	61 f4       	brne	.+24     	; 0xb9e <kernel_handle_request+0x8e>
     b86:	80 91 20 0c 	lds	r24, 0x0C20
     b8a:	90 91 21 0c 	lds	r25, 0x0C21
     b8e:	fc 01       	movw	r30, r24
     b90:	eb 5f       	subi	r30, 0xFB	; 251
     b92:	fe 4f       	sbci	r31, 0xFE	; 254
     b94:	20 81       	ld	r18, Z
     b96:	23 30       	cpi	r18, 0x03	; 3
     b98:	09 f0       	breq	.+2      	; 0xb9c <kernel_handle_request+0x8c>
     b9a:	68 c0       	rjmp	.+208    	; 0xc6c <kernel_handle_request+0x15c>
     b9c:	64 c0       	rjmp	.+200    	; 0xc66 <kernel_handle_request+0x156>
            {
                cur_task->state = READY;
            }

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR && kernel_request_create_args.level == PERIODIC && kernel_request_create_args.start == 0)
     b9e:	60 91 20 0c 	lds	r22, 0x0C20
     ba2:	70 91 21 0c 	lds	r23, 0x0C21
     ba6:	fb 01       	movw	r30, r22
     ba8:	eb 5f       	subi	r30, 0xFB	; 251
     baa:	fe 4f       	sbci	r31, 0xFE	; 254
     bac:	80 81       	ld	r24, Z
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <kernel_handle_request+0xa4>
     bb2:	59 c0       	rjmp	.+178    	; 0xc66 <kernel_handle_request+0x156>
     bb4:	80 91 29 0c 	lds	r24, 0x0C29
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	39 f4       	brne	.+14     	; 0xbca <kernel_handle_request+0xba>
     bbc:	80 91 2e 0c 	lds	r24, 0x0C2E
     bc0:	90 91 2f 0c 	lds	r25, 0x0C2F
     bc4:	89 2b       	or	r24, r25
     bc6:	09 f4       	brne	.+2      	; 0xbca <kernel_handle_request+0xba>
     bc8:	57 c0       	rjmp	.+174    	; 0xc78 <kernel_handle_request+0x168>
            {
                cur_task->state = READY;
            }

            /* enqueue READY RR tasks. */
            if(cur_task->level == RR && cur_task->state == READY)
     bca:	fb 01       	movw	r30, r22
     bcc:	ee 5f       	subi	r30, 0xFE	; 254
     bce:	fe 4f       	sbci	r31, 0xFE	; 254
     bd0:	80 81       	ld	r24, Z
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <kernel_handle_request+0xc8>
     bd6:	47 c0       	rjmp	.+142    	; 0xc66 <kernel_handle_request+0x156>
            {
                enqueue(&rr_queue, cur_task);
     bd8:	84 ed       	ldi	r24, 0xD4	; 212
     bda:	92 e0       	ldi	r25, 0x02	; 2
     bdc:	2b de       	rcall	.-938    	; 0x834 <enqueue>
     bde:	43 c0       	rjmp	.+134    	; 0xc66 <kernel_handle_request+0x156>
            }
        }
        break;

    case TASK_TERMINATE:
		if(cur_task != idle_task)
     be0:	20 91 20 0c 	lds	r18, 0x0C20
     be4:	30 91 21 0c 	lds	r19, 0x0C21
     be8:	80 91 1b 02 	lds	r24, 0x021B
     bec:	90 91 1c 02 	lds	r25, 0x021C
     bf0:	28 17       	cp	r18, r24
     bf2:	39 07       	cpc	r19, r25
     bf4:	c1 f1       	breq	.+112    	; 0xc66 <kernel_handle_request+0x156>
		{
        	kernel_terminate_task();
     bf6:	36 de       	rcall	.-916    	; 0x864 <kernel_terminate_task>
     bf8:	36 c0       	rjmp	.+108    	; 0xc66 <kernel_handle_request+0x156>
		}
        break;

    case TASK_NEXT:
		switch(cur_task->level)
     bfa:	60 91 20 0c 	lds	r22, 0x0C20
     bfe:	70 91 21 0c 	lds	r23, 0x0C21
     c02:	fb 01       	movw	r30, r22
     c04:	eb 5f       	subi	r30, 0xFB	; 251
     c06:	fe 4f       	sbci	r31, 0xFE	; 254
     c08:	80 81       	ld	r24, Z
     c0a:	82 30       	cpi	r24, 0x02	; 2
     c0c:	79 f0       	breq	.+30     	; 0xc2c <kernel_handle_request+0x11c>
     c0e:	83 30       	cpi	r24, 0x03	; 3
     c10:	19 f0       	breq	.+6      	; 0xc18 <kernel_handle_request+0x108>
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	d9 f4       	brne	.+54     	; 0xc4c <kernel_handle_request+0x13c>
     c16:	11 c0       	rjmp	.+34     	; 0xc3a <kernel_handle_request+0x12a>
		{
	    case SYSTEM:
	        if(cur_task->state != WAITING) {
     c18:	fb 01       	movw	r30, r22
     c1a:	ee 5f       	subi	r30, 0xFE	; 254
     c1c:	fe 4f       	sbci	r31, 0xFE	; 254
     c1e:	80 81       	ld	r24, Z
     c20:	83 30       	cpi	r24, 0x03	; 3
     c22:	a1 f0       	breq	.+40     	; 0xc4c <kernel_handle_request+0x13c>
				enqueue(&system_queue, cur_task);
     c24:	80 ed       	ldi	r24, 0xD0	; 208
     c26:	92 e0       	ldi	r25, 0x02	; 2
     c28:	05 de       	rcall	.-1014   	; 0x834 <enqueue>
     c2a:	10 c0       	rjmp	.+32     	; 0xc4c <kernel_handle_request+0x13c>
			break;

	    case PERIODIC:
			// FIXME: What should we be doing here? -- perhaps setting ticks_remaining ? or perhaps setting periodic_task->iteration_complete to 1 ?
	        //slot_task_finished = 1;
			periodic_task->iteration_complete = 1;
     c2c:	e0 91 19 02 	lds	r30, 0x0219
     c30:	f0 91 1a 02 	lds	r31, 0x021A
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	87 83       	std	Z+7, r24	; 0x07
	        break;
     c38:	09 c0       	rjmp	.+18     	; 0xc4c <kernel_handle_request+0x13c>

	    case RR:
			if(cur_task->state != WAITING) {
     c3a:	fb 01       	movw	r30, r22
     c3c:	ee 5f       	subi	r30, 0xFE	; 254
     c3e:	fe 4f       	sbci	r31, 0xFE	; 254
     c40:	80 81       	ld	r24, Z
     c42:	83 30       	cpi	r24, 0x03	; 3
     c44:	19 f0       	breq	.+6      	; 0xc4c <kernel_handle_request+0x13c>
				enqueue(&rr_queue, cur_task);
     c46:	84 ed       	ldi	r24, 0xD4	; 212
     c48:	92 e0       	ldi	r25, 0x02	; 2
     c4a:	f4 dd       	rcall	.-1048   	; 0x834 <enqueue>

	    default: /* idle_task */
			break;
		}

		cur_task->state = READY;
     c4c:	e0 91 20 0c 	lds	r30, 0x0C20
     c50:	f0 91 21 0c 	lds	r31, 0x0C21
     c54:	ee 5f       	subi	r30, 0xFE	; 254
     c56:	fe 4f       	sbci	r31, 0xFE	; 254
     c58:	82 e0       	ldi	r24, 0x02	; 2
     c5a:	80 83       	st	Z, r24
        break;
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <kernel_handle_request+0x156>
		// FIXME: we probably will need to do something here.
        break;
		
    default:
        /* Should never happen */
        error_msg = ERR_RUN_8_RTOS_INTERNAL_ERROR;
     c5e:	87 e0       	ldi	r24, 0x07	; 7
     c60:	80 93 32 0c 	sts	0x0C32, r24
        OS_Abort();
     c64:	ec db       	rcall	.-2088   	; 0x43e <OS_Abort>
        break;
    }

    kernel_request = NONE;
     c66:	10 92 24 0c 	sts	0x0C24, r1
     c6a:	08 95       	ret
        if(kernel_request_retval)
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
            {
                cur_task->state = READY;
     c6c:	fc 01       	movw	r30, r24
     c6e:	ee 5f       	subi	r30, 0xFE	; 254
     c70:	fe 4f       	sbci	r31, 0xFE	; 254
     c72:	22 e0       	ldi	r18, 0x02	; 2
     c74:	20 83       	st	Z, r18
     c76:	93 cf       	rjmp	.-218    	; 0xb9e <kernel_handle_request+0x8e>
            }

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR && kernel_request_create_args.level == PERIODIC && kernel_request_create_args.start == 0)
            {
                cur_task->state = READY;
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	fb 01       	movw	r30, r22
     c7c:	ee 5f       	subi	r30, 0xFE	; 254
     c7e:	fe 4f       	sbci	r31, 0xFE	; 254
     c80:	80 83       	st	Z, r24
            }

            /* enqueue READY RR tasks. */
            if(cur_task->level == RR && cur_task->state == READY)
     c82:	33 96       	adiw	r30, 0x03	; 3
     c84:	80 81       	ld	r24, Z
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	09 f4       	brne	.+2      	; 0xc8c <kernel_handle_request+0x17c>
     c8a:	9f cf       	rjmp	.-194    	; 0xbca <kernel_handle_request+0xba>
     c8c:	ec cf       	rjmp	.-40     	; 0xc66 <kernel_handle_request+0x156>

00000c8e <kernel_main_loop>:
 */
void kernel_main_loop(void)
{
    for(;;)
    {
        kernel_dispatch();
     c8e:	0f de       	rcall	.-994    	; 0x8ae <kernel_dispatch>

        exit_kernel();
     c90:	b4 dc       	rcall	.-1688   	; 0x5fa <exit_kernel>

        /* if this task makes a system call, or is interrupted,
         * the thread of control will return to here. */

        kernel_handle_request();
     c92:	3e df       	rcall	.-388    	; 0xb10 <kernel_handle_request>
     c94:	fc cf       	rjmp	.-8      	; 0xc8e <kernel_main_loop>

00000c96 <_delay_25ms>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c96:	89 e6       	ldi	r24, 0x69	; 105
     c98:	98 e1       	ldi	r25, 0x18	; 24
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <_delay_25ms+0x4>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <_delay_25ms+0xa>
     ca0:	00 00       	nop
     ca2:	08 95       	ret

00000ca4 <Scheduler_Init>:

static task_t* ready_task;

void Scheduler_Init()
{
    last_runtime = Now();
     ca4:	7d dc       	rcall	.-1798   	; 0x5a0 <Now>
     ca6:	90 93 37 0c 	sts	0x0C37, r25
     caa:	80 93 36 0c 	sts	0x0C36, r24
     cae:	08 95       	ret

00000cb0 <Scheduler_StartTask>:
}

void Scheduler_StartTask(task_descriptor_t* descriptor, uint16_t delay, uint16_t period, uint16_t wcet, voidfuncvoid_ptr task)
{
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
    static uint8_t id = 0;
    if (id < MAXPROCESS)
     cba:	f0 90 33 0c 	lds	r15, 0x0C33
     cbe:	e7 e0       	ldi	r30, 0x07	; 7
     cc0:	ef 15       	cp	r30, r15
     cc2:	f0 f0       	brcs	.+60     	; 0xd00 <Scheduler_StartTask+0x50>
    {
        periodic_tasks[id].remaining_time = delay;
     cc4:	af 2d       	mov	r26, r15
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	ed 01       	movw	r28, r26
     cca:	cc 0f       	add	r28, r28
     ccc:	dd 1f       	adc	r29, r29
     cce:	fe 01       	movw	r30, r28
     cd0:	ea 0f       	add	r30, r26
     cd2:	fb 1f       	adc	r31, r27
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	e8 5c       	subi	r30, 0xC8	; 200
     cde:	f3 4f       	sbci	r31, 0xF3	; 243
     ce0:	73 83       	std	Z+3, r23	; 0x03
     ce2:	62 83       	std	Z+2, r22	; 0x02
        periodic_tasks[id].period = period;
     ce4:	51 83       	std	Z+1, r21	; 0x01
     ce6:	40 83       	st	Z, r20
		periodic_tasks[id].wcet = wcet;
     ce8:	35 83       	std	Z+5, r19	; 0x05
     cea:	24 83       	std	Z+4, r18	; 0x04
        periodic_tasks[id].is_running = 1;
     cec:	21 e0       	ldi	r18, 0x01	; 1
     cee:	26 83       	std	Z+6, r18	; 0x06
		periodic_tasks[id].iteration_complete = 0;
     cf0:	17 82       	std	Z+7, r1	; 0x07
        periodic_tasks[id].callback = task;
     cf2:	11 87       	std	Z+9, r17	; 0x09
     cf4:	00 87       	std	Z+8, r16	; 0x08
        periodic_tasks[id].descriptor = descriptor;
     cf6:	93 87       	std	Z+11, r25	; 0x0b
     cf8:	82 87       	std	Z+10, r24	; 0x0a
        id++;
     cfa:	f3 94       	inc	r15
     cfc:	f0 92 33 0c 	sts	0x0C33, r15
    }
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	08 95       	ret

00000d0c <Scheduler_StopTask>:

void Scheduler_StopTask(task_descriptor_t* task) {
     d0c:	08 95       	ret

00000d0e <Scheduler_Dispatch>:
    // FIXME: implement this function
	// can probably set the periodic task's is_running to 0
}

uint16_t Scheduler_Dispatch()
{
     d0e:	7f 92       	push	r7
     d10:	8f 92       	push	r8
     d12:	9f 92       	push	r9
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
    uint8_t i;
    uint16_t now = Now();
     d28:	3b dc       	rcall	.-1930   	; 0x5a0 <Now>
    uint16_t elapsed = now - last_runtime;
     d2a:	20 91 36 0c 	lds	r18, 0x0C36
     d2e:	30 91 37 0c 	lds	r19, 0x0C37
     d32:	6c 01       	movw	r12, r24
     d34:	c2 1a       	sub	r12, r18
     d36:	d3 0a       	sbc	r13, r19

    last_runtime = now;
     d38:	90 93 37 0c 	sts	0x0C37, r25
     d3c:	80 93 36 0c 	sts	0x0C36, r24
     d40:	c8 e3       	ldi	r28, 0x38	; 56
     d42:	dc e0       	ldi	r29, 0x0C	; 12
     d44:	0f e3       	ldi	r16, 0x3F	; 63
     d46:	1c e0       	ldi	r17, 0x0C	; 12
     d48:	0f 2e       	mov	r0, r31
     d4a:	f8 e9       	ldi	r31, 0x98	; 152
     d4c:	ef 2e       	mov	r14, r31
     d4e:	fc e0       	ldi	r31, 0x0C	; 12
     d50:	ff 2e       	mov	r15, r31
     d52:	f0 2d       	mov	r31, r0
    voidfuncvoid_ptr t = NULL;
    uint16_t idle_time = 0xFFFF;
     d54:	8f ef       	ldi	r24, 0xFF	; 255
     d56:	9f ef       	ldi	r25, 0xFF	; 255
    uint8_t i;
    uint16_t now = Now();
    uint16_t elapsed = now - last_runtime;

    last_runtime = now;
    voidfuncvoid_ptr t = NULL;
     d58:	a1 2c       	mov	r10, r1
     d5a:	b1 2c       	mov	r11, r1
                    ready_task = &periodic_tasks[i];
					periodic_tasks[i].iteration_complete = 0; // reset this so that we know that the execution for this task has not completed yet.
                    periodic_tasks[i].remaining_time += periodic_tasks[i].period;
                } else {
					// middle finger
					error_msg = ERR_RUN_6_PERIODIC_SCHEDULE_INVALID_SETUP;
     d5c:	0f 2e       	mov	r0, r31
     d5e:	f5 e0       	ldi	r31, 0x05	; 5
     d60:	7f 2e       	mov	r7, r31
     d62:	f0 2d       	mov	r31, r0
					OS_Abort();
				}
                idle_time = 0;
     d64:	81 2c       	mov	r8, r1
     d66:	91 2c       	mov	r9, r1
     d68:	d8 01       	movw	r26, r16
     d6a:	f8 01       	movw	r30, r16
     d6c:	31 97       	sbiw	r30, 0x01	; 1
    uint16_t idle_time = 0xFFFF;
    
    // update each task's remaining time, and identify the first ready task (if there is one).
    for (i = 0; i < MAXPROCESS; i++)
    {
        if (periodic_tasks[i].is_running)
     d6e:	20 81       	ld	r18, Z
     d70:	22 23       	and	r18, r18
     d72:	41 f1       	breq	.+80     	; 0xdc4 <Scheduler_Dispatch+0xb6>
        {
            // update the task's remaining time
            periodic_tasks[i].remaining_time -= elapsed;
     d74:	2a 81       	ldd	r18, Y+2	; 0x02
     d76:	3b 81       	ldd	r19, Y+3	; 0x03
     d78:	2c 19       	sub	r18, r12
     d7a:	3d 09       	sbc	r19, r13
     d7c:	3b 83       	std	Y+3, r19	; 0x03
     d7e:	2a 83       	std	Y+2, r18	; 0x02
            if (periodic_tasks[i].remaining_time <= 0)
     d80:	12 16       	cp	r1, r18
     d82:	13 06       	cpc	r1, r19
     d84:	dc f0       	brlt	.+54     	; 0xdbc <Scheduler_Dispatch+0xae>
            {
                if (t == NULL)
     d86:	a1 14       	cp	r10, r1
     d88:	b1 04       	cpc	r11, r1
     d8a:	91 f4       	brne	.+36     	; 0xdb0 <Scheduler_Dispatch+0xa2>
                {
                    // if this task is ready to run, and we haven't already selected a task to run,
                    // select this one.
                    t = periodic_tasks[i].callback;
     d8c:	a8 84       	ldd	r10, Y+8	; 0x08
     d8e:	b9 84       	ldd	r11, Y+9	; 0x09
                    /* Note this side effect. This ready_task property can be accessed via Scheduler_GetTask() */
                    ready_task = &periodic_tasks[i];
     d90:	d0 93 35 0c 	sts	0x0C35, r29
     d94:	c0 93 34 0c 	sts	0x0C34, r28
					periodic_tasks[i].iteration_complete = 0; // reset this so that we know that the execution for this task has not completed yet.
     d98:	1c 92       	st	X, r1
                    periodic_tasks[i].remaining_time += periodic_tasks[i].period;
     d9a:	2a 81       	ldd	r18, Y+2	; 0x02
     d9c:	3b 81       	ldd	r19, Y+3	; 0x03
     d9e:	88 81       	ld	r24, Y
     da0:	99 81       	ldd	r25, Y+1	; 0x01
     da2:	82 0f       	add	r24, r18
     da4:	93 1f       	adc	r25, r19
     da6:	9b 83       	std	Y+3, r25	; 0x03
     da8:	8a 83       	std	Y+2, r24	; 0x02
                } else {
					// middle finger
					error_msg = ERR_RUN_6_PERIODIC_SCHEDULE_INVALID_SETUP;
					OS_Abort();
				}
                idle_time = 0;
     daa:	88 2d       	mov	r24, r8
     dac:	99 2d       	mov	r25, r9
     dae:	0a c0       	rjmp	.+20     	; 0xdc4 <Scheduler_Dispatch+0xb6>
                    ready_task = &periodic_tasks[i];
					periodic_tasks[i].iteration_complete = 0; // reset this so that we know that the execution for this task has not completed yet.
                    periodic_tasks[i].remaining_time += periodic_tasks[i].period;
                } else {
					// middle finger
					error_msg = ERR_RUN_6_PERIODIC_SCHEDULE_INVALID_SETUP;
     db0:	70 92 98 0c 	sts	0x0C98, r7
					OS_Abort();
     db4:	44 db       	rcall	.-2424   	; 0x43e <OS_Abort>
				}
                idle_time = 0;
     db6:	88 2d       	mov	r24, r8
     db8:	99 2d       	mov	r25, r9
     dba:	04 c0       	rjmp	.+8      	; 0xdc4 <Scheduler_Dispatch+0xb6>
     dbc:	28 17       	cp	r18, r24
     dbe:	39 07       	cpc	r19, r25
     dc0:	08 f4       	brcc	.+2      	; 0xdc4 <Scheduler_Dispatch+0xb6>
     dc2:	c9 01       	movw	r24, r18
     dc4:	2c 96       	adiw	r28, 0x0c	; 12
     dc6:	04 5f       	subi	r16, 0xF4	; 244
     dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    last_runtime = now;
    voidfuncvoid_ptr t = NULL;
    uint16_t idle_time = 0xFFFF;
    
    // update each task's remaining time, and identify the first ready task (if there is one).
    for (i = 0; i < MAXPROCESS; i++)
     dca:	ce 15       	cp	r28, r14
     dcc:	df 05       	cpc	r29, r15
     dce:	61 f6       	brne	.-104    	; 0xd68 <Scheduler_Dispatch+0x5a>
    //{
    //    // If a task was selected to run, call its function.
    //    t();
    //}
    return idle_time;
}
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	df 90       	pop	r13
     dde:	cf 90       	pop	r12
     de0:	bf 90       	pop	r11
     de2:	af 90       	pop	r10
     de4:	9f 90       	pop	r9
     de6:	8f 90       	pop	r8
     de8:	7f 90       	pop	r7
     dea:	08 95       	ret

00000dec <Scheduler_GetTask>:

/* If there is a PERIODIC task that is ready to run (indentified by Scheduler_Dispatch())
 * then return the tasks descriptor and CLEAR this ready_task property
 */
task_t* Scheduler_GetTask() {
    task_t* task = ready_task;
     dec:	80 91 34 0c 	lds	r24, 0x0C34
     df0:	90 91 35 0c 	lds	r25, 0x0C35
    ready_task = &EmptyStruct;
     df4:	2d e1       	ldi	r18, 0x1D	; 29
     df6:	32 e0       	ldi	r19, 0x02	; 2
     df8:	30 93 35 0c 	sts	0x0C35, r19
     dfc:	20 93 34 0c 	sts	0x0C34, r18
    return task;
}
     e00:	08 95       	ret

00000e02 <_ZL10get_statusv>:
}

void Radio_Flush()
{
	send_instruction(FLUSH_TX, NULL, NULL, 0);
	send_instruction(FLUSH_RX, NULL, NULL, 0);
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	c2 e0       	ldi	r28, 0x02	; 2
     e08:	d1 e0       	ldi	r29, 0x01	; 1
     e0a:	88 81       	ld	r24, Y
     e0c:	8f 7b       	andi	r24, 0xBF	; 191
     e0e:	88 83       	st	Y, r24
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	d2 d2       	rcall	.+1444   	; 0x13b8 <_Z14SPI_Write_Byteh>
     e14:	98 81       	ld	r25, Y
     e16:	90 64       	ori	r25, 0x40	; 64
     e18:	98 83       	st	Y, r25
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	08 95       	ret

00000e20 <_ZL12set_registerhPhh>:
     e20:	ef 92       	push	r14
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	8b 01       	movw	r16, r22
     e2e:	e4 2e       	mov	r14, r20
     e30:	c2 e0       	ldi	r28, 0x02	; 2
     e32:	d1 e0       	ldi	r29, 0x01	; 1
     e34:	98 81       	ld	r25, Y
     e36:	9f 7b       	andi	r25, 0xBF	; 191
     e38:	98 83       	st	Y, r25
     e3a:	8f 71       	andi	r24, 0x1F	; 31
     e3c:	80 62       	ori	r24, 0x20	; 32
     e3e:	bc d2       	rcall	.+1400   	; 0x13b8 <_Z14SPI_Write_Byteh>
     e40:	f8 2e       	mov	r15, r24
     e42:	6e 2d       	mov	r22, r14
     e44:	c8 01       	movw	r24, r16
     e46:	a9 d2       	rcall	.+1362   	; 0x139a <_Z15SPI_Write_BlockPhh>
     e48:	88 81       	ld	r24, Y
     e4a:	80 64       	ori	r24, 0x40	; 64
     e4c:	88 83       	st	Y, r24
     e4e:	8f 2d       	mov	r24, r15
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	08 95       	ret

00000e5e <_ZL19reset_pipe0_addressv>:
     e5e:	80 91 36 02 	lds	r24, 0x0236
     e62:	88 23       	and	r24, r24
     e64:	29 f0       	breq	.+10     	; 0xe70 <_ZL19reset_pipe0_addressv+0x12>
     e66:	45 e0       	ldi	r20, 0x05	; 5
     e68:	6c e2       	ldi	r22, 0x2C	; 44
     e6a:	72 e0       	ldi	r23, 0x02	; 2
     e6c:	8a e0       	ldi	r24, 0x0A	; 10
     e6e:	d8 cf       	rjmp	.-80     	; 0xe20 <_ZL12set_registerhPhh>
     e70:	08 95       	ret

00000e72 <_ZL16send_instructionhPhS_h>:
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	8b 01       	movw	r16, r22
     e7e:	ea 01       	movw	r28, r20
     e80:	f2 2e       	mov	r15, r18
     e82:	e2 e0       	ldi	r30, 0x02	; 2
     e84:	f1 e0       	ldi	r31, 0x01	; 1
     e86:	90 81       	ld	r25, Z
     e88:	9f 7b       	andi	r25, 0xBF	; 191
     e8a:	90 83       	st	Z, r25
     e8c:	95 d2       	rcall	.+1322   	; 0x13b8 <_Z14SPI_Write_Byteh>
     e8e:	ff 20       	and	r15, r15
     e90:	51 f0       	breq	.+20     	; 0xea6 <_ZL16send_instructionhPhS_h+0x34>
     e92:	20 97       	sbiw	r28, 0x00	; 0
     e94:	21 f4       	brne	.+8      	; 0xe9e <_ZL16send_instructionhPhS_h+0x2c>
     e96:	6f 2d       	mov	r22, r15
     e98:	c8 01       	movw	r24, r16
     e9a:	7f d2       	rcall	.+1278   	; 0x139a <_Z15SPI_Write_BlockPhh>
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <_ZL16send_instructionhPhS_h+0x34>
     e9e:	4f 2d       	mov	r20, r15
     ea0:	be 01       	movw	r22, r28
     ea2:	c8 01       	movw	r24, r16
     ea4:	67 d2       	rcall	.+1230   	; 0x1374 <_Z19SPI_ReadWrite_BlockPhS_h>
     ea6:	e2 e0       	ldi	r30, 0x02	; 2
     ea8:	f1 e0       	ldi	r31, 0x01	; 1
     eaa:	80 81       	ld	r24, Z
     eac:	80 64       	ori	r24, 0x40	; 64
     eae:	80 83       	st	Z, r24
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	08 95       	ret

00000ebc <_ZL12get_registerhPhh>:
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	06 2f       	mov	r16, r22
     eca:	f7 2e       	mov	r15, r23
     ecc:	14 2f       	mov	r17, r20
     ece:	44 23       	and	r20, r20
     ed0:	49 f0       	breq	.+18     	; 0xee4 <_ZL12get_registerhPhh+0x28>
     ed2:	36 2f       	mov	r19, r22
     ed4:	e6 2f       	mov	r30, r22
     ed6:	f7 2f       	mov	r31, r23
     ed8:	2f ef       	ldi	r18, 0xFF	; 255
     eda:	21 93       	st	Z+, r18
     edc:	9e 2f       	mov	r25, r30
     ede:	93 1b       	sub	r25, r19
     ee0:	91 17       	cp	r25, r17
     ee2:	d8 f3       	brcs	.-10     	; 0xeda <_ZL12get_registerhPhh+0x1e>
     ee4:	c2 e0       	ldi	r28, 0x02	; 2
     ee6:	d1 e0       	ldi	r29, 0x01	; 1
     ee8:	98 81       	ld	r25, Y
     eea:	9f 7b       	andi	r25, 0xBF	; 191
     eec:	98 83       	st	Y, r25
     eee:	8f 71       	andi	r24, 0x1F	; 31
     ef0:	63 d2       	rcall	.+1222   	; 0x13b8 <_Z14SPI_Write_Byteh>
     ef2:	e8 2e       	mov	r14, r24
     ef4:	41 2f       	mov	r20, r17
     ef6:	60 2f       	mov	r22, r16
     ef8:	7f 2d       	mov	r23, r15
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	3a d2       	rcall	.+1140   	; 0x1374 <_Z19SPI_ReadWrite_BlockPhS_h>
     f00:	88 81       	ld	r24, Y
     f02:	80 64       	ori	r24, 0x40	; 64
     f04:	88 83       	st	Y, r24
     f06:	8e 2d       	mov	r24, r14
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	08 95       	ret

00000f16 <_ZL11set_rx_modev>:
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	1f 92       	push	r1
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	41 e0       	ldi	r20, 0x01	; 1
     f22:	be 01       	movw	r22, r28
     f24:	6f 5f       	subi	r22, 0xFF	; 255
     f26:	7f 4f       	sbci	r23, 0xFF	; 255
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	c8 df       	rcall	.-112    	; 0xebc <_ZL12get_registerhPhh>
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	80 fd       	sbrc	r24, 0
     f30:	10 c0       	rjmp	.+32     	; 0xf52 <_ZL11set_rx_modev+0x3c>
     f32:	81 60       	ori	r24, 0x01	; 1
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	41 e0       	ldi	r20, 0x01	; 1
     f38:	be 01       	movw	r22, r28
     f3a:	6f 5f       	subi	r22, 0xFF	; 255
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	6f df       	rcall	.-290    	; 0xe20 <_ZL12set_registerhPhh>
     f42:	85 e1       	ldi	r24, 0x15	; 21
     f44:	8a 95       	dec	r24
     f46:	f1 f7       	brne	.-4      	; 0xf44 <_ZL11set_rx_modev+0x2e>
     f48:	00 c0       	rjmp	.+0      	; 0xf4a <_ZL11set_rx_modev+0x34>
     f4a:	85 e1       	ldi	r24, 0x15	; 21
     f4c:	8a 95       	dec	r24
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <_ZL11set_rx_modev+0x36>
     f50:	00 c0       	rjmp	.+0      	; 0xf52 <_ZL11set_rx_modev+0x3c>
     f52:	0f 90       	pop	r0
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <_Z10Radio_Initv>:
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	1f 92       	push	r1
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	10 92 99 0c 	sts	0x0C99, r1
     f68:	e1 e0       	ldi	r30, 0x01	; 1
     f6a:	f1 e0       	ldi	r31, 0x01	; 1
     f6c:	80 81       	ld	r24, Z
     f6e:	88 61       	ori	r24, 0x18	; 24
     f70:	80 83       	st	Z, r24
     f72:	a2 e0       	ldi	r26, 0x02	; 2
     f74:	b1 e0       	ldi	r27, 0x01	; 1
     f76:	8c 91       	ld	r24, X
     f78:	8f 7e       	andi	r24, 0xEF	; 239
     f7a:	8c 93       	st	X, r24
     f7c:	8c 91       	ld	r24, X
     f7e:	87 7f       	andi	r24, 0xF7	; 247
     f80:	8c 93       	st	X, r24
     f82:	8c 91       	ld	r24, X
     f84:	8f 7d       	andi	r24, 0xDF	; 223
     f86:	8c 93       	st	X, r24
     f88:	80 81       	ld	r24, Z
     f8a:	80 62       	ori	r24, 0x20	; 32
     f8c:	80 83       	st	Z, r24
     f8e:	80 81       	ld	r24, Z
     f90:	80 64       	ori	r24, 0x40	; 64
     f92:	80 83       	st	Z, r24
     f94:	6c 98       	cbi	0x0d, 4	; 13
     f96:	ea e6       	ldi	r30, 0x6A	; 106
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	82 60       	ori	r24, 0x02	; 2
     f9e:	80 83       	st	Z, r24
     fa0:	80 81       	ld	r24, Z
     fa2:	8e 7f       	andi	r24, 0xFE	; 254
     fa4:	80 83       	st	Z, r24
     fa6:	ec 9a       	sbi	0x1d, 4	; 29
     fa8:	e4 9a       	sbi	0x1c, 4	; 28
     faa:	8d eb       	ldi	r24, 0xBD	; 189
     fac:	9a e0       	ldi	r25, 0x0A	; 10
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <_Z10Radio_Initv+0x54>
     fb2:	00 c0       	rjmp	.+0      	; 0xfb4 <_Z10Radio_Initv+0x5a>
     fb4:	00 00       	nop
     fb6:	d1 d1       	rcall	.+930    	; 0x135a <_Z8SPI_Initv>
     fb8:	83 e0       	ldi	r24, 0x03	; 3
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	41 e0       	ldi	r20, 0x01	; 1
     fbe:	be 01       	movw	r22, r28
     fc0:	6f 5f       	subi	r22, 0xFF	; 255
     fc2:	7f 4f       	sbci	r23, 0xFF	; 255
     fc4:	2d df       	rcall	.-422    	; 0xe20 <_ZL12set_registerhPhh>
     fc6:	85 e1       	ldi	r24, 0x15	; 21
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	41 e0       	ldi	r20, 0x01	; 1
     fcc:	be 01       	movw	r22, r28
     fce:	6f 5f       	subi	r22, 0xFF	; 255
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	84 e0       	ldi	r24, 0x04	; 4
     fd4:	25 df       	rcall	.-438    	; 0xe20 <_ZL12set_registerhPhh>
     fd6:	88 e6       	ldi	r24, 0x68	; 104
     fd8:	89 83       	std	Y+1, r24	; 0x01
     fda:	41 e0       	ldi	r20, 0x01	; 1
     fdc:	be 01       	movw	r22, r28
     fde:	6f 5f       	subi	r22, 0xFF	; 255
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	85 e0       	ldi	r24, 0x05	; 5
     fe4:	1d df       	rcall	.-454    	; 0xe20 <_ZL12set_registerhPhh>
     fe6:	89 e0       	ldi	r24, 0x09	; 9
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	41 e0       	ldi	r20, 0x01	; 1
     fec:	be 01       	movw	r22, r28
     fee:	6f 5f       	subi	r22, 0xFF	; 255
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	86 e0       	ldi	r24, 0x06	; 6
     ff4:	15 df       	rcall	.-470    	; 0xe20 <_ZL12set_registerhPhh>
     ff6:	8f e0       	ldi	r24, 0x0F	; 15
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	41 e0       	ldi	r20, 0x01	; 1
     ffc:	be 01       	movw	r22, r28
     ffe:	6f 5f       	subi	r22, 0xFF	; 255
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	0d df       	rcall	.-486    	; 0xe20 <_ZL12set_registerhPhh>
    1006:	80 e7       	ldi	r24, 0x70	; 112
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	41 e0       	ldi	r20, 0x01	; 1
    100c:	be 01       	movw	r22, r28
    100e:	6f 5f       	subi	r22, 0xFF	; 255
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	87 e0       	ldi	r24, 0x07	; 7
    1014:	05 df       	rcall	.-502    	; 0xe20 <_ZL12set_registerhPhh>
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	81 ee       	ldi	r24, 0xE1	; 225
    1022:	27 df       	rcall	.-434    	; 0xe72 <_ZL16send_instructionhPhS_h>
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	82 ee       	ldi	r24, 0xE2	; 226
    1030:	20 df       	rcall	.-448    	; 0xe72 <_ZL16send_instructionhPhS_h>
    1032:	83 ef       	ldi	r24, 0xF3	; 243
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <_Z10Radio_Initv+0xdc>
    103a:	00 c0       	rjmp	.+0      	; 0x103c <_Z10Radio_Initv+0xe2>
    103c:	00 00       	nop
    103e:	e2 e0       	ldi	r30, 0x02	; 2
    1040:	f1 e0       	ldi	r31, 0x01	; 1
    1042:	80 81       	ld	r24, Z
    1044:	80 62       	ori	r24, 0x20	; 32
    1046:	80 83       	st	Z, r24
    1048:	80 81       	ld	r24, Z
    104a:	80 61       	ori	r24, 0x10	; 16
    104c:	80 83       	st	Z, r24
    104e:	0f 90       	pop	r0
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed>:
    1056:	cf 92       	push	r12
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	1f 92       	push	r1
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	d8 2e       	mov	r13, r24
    106e:	c4 2e       	mov	r12, r20
    1070:	85 e0       	ldi	r24, 0x05	; 5
    1072:	8d 15       	cp	r24, r13
    1074:	08 f4       	brcc	.+2      	; 0x1078 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x22>
    1076:	6f c0       	rjmp	.+222    	; 0x1156 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x100>
    1078:	d1 10       	cpse	r13, r1
    107a:	11 c0       	rjmp	.+34     	; 0x109e <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x48>
    107c:	fb 01       	movw	r30, r22
    107e:	80 81       	ld	r24, Z
    1080:	80 93 2c 02 	sts	0x022C, r24
    1084:	81 81       	ldd	r24, Z+1	; 0x01
    1086:	80 93 2d 02 	sts	0x022D, r24
    108a:	82 81       	ldd	r24, Z+2	; 0x02
    108c:	80 93 2e 02 	sts	0x022E, r24
    1090:	83 81       	ldd	r24, Z+3	; 0x03
    1092:	80 93 2f 02 	sts	0x022F, r24
    1096:	84 81       	ldd	r24, Z+4	; 0x04
    1098:	80 93 30 02 	sts	0x0230, r24
    109c:	03 c0       	rjmp	.+6      	; 0x10a4 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x4e>
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	fd 15       	cp	r31, r13
    10a2:	10 f0       	brcs	.+4      	; 0x10a8 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x52>
    10a4:	45 e0       	ldi	r20, 0x05	; 5
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x54>
    10a8:	41 e0       	ldi	r20, 0x01	; 1
    10aa:	8a e0       	ldi	r24, 0x0A	; 10
    10ac:	8d 0d       	add	r24, r13
    10ae:	b8 de       	rcall	.-656    	; 0xe20 <_ZL12set_registerhPhh>
    10b0:	41 e0       	ldi	r20, 0x01	; 1
    10b2:	be 01       	movw	r22, r28
    10b4:	6f 5f       	subi	r22, 0xFF	; 255
    10b6:	7f 4f       	sbci	r23, 0xFF	; 255
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	00 df       	rcall	.-512    	; 0xebc <_ZL12get_registerhPhh>
    10bc:	ed 2c       	mov	r14, r13
    10be:	f1 2c       	mov	r15, r1
    10c0:	01 e0       	ldi	r16, 0x01	; 1
    10c2:	10 e0       	ldi	r17, 0x00	; 0
    10c4:	0d 2c       	mov	r0, r13
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x76>
    10c8:	00 0f       	add	r16, r16
    10ca:	11 1f       	adc	r17, r17
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x72>
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	80 2b       	or	r24, r16
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	41 e0       	ldi	r20, 0x01	; 1
    10d8:	be 01       	movw	r22, r28
    10da:	6f 5f       	subi	r22, 0xFF	; 255
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	9f de       	rcall	.-706    	; 0xe20 <_ZL12set_registerhPhh>
    10e2:	c1 10       	cpse	r12, r1
    10e4:	08 c0       	rjmp	.+16     	; 0x10f6 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xa0>
    10e6:	1f c0       	rjmp	.+62     	; 0x1126 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0xd0>
    10e8:	41 e0       	ldi	r20, 0x01	; 1
    10ea:	be 01       	movw	r22, r28
    10ec:	6f 5f       	subi	r22, 0xFF	; 255
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	82 e0       	ldi	r24, 0x02	; 2
    10f2:	96 de       	rcall	.-724    	; 0xe20 <_ZL12set_registerhPhh>
    10f4:	30 c0       	rjmp	.+96     	; 0x1156 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x100>
    10f6:	80 e2       	ldi	r24, 0x20	; 32
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	be 01       	movw	r22, r28
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	81 e1       	ldi	r24, 0x11	; 17
    1104:	8d 0d       	add	r24, r13
    1106:	8c de       	rcall	.-744    	; 0xe20 <_ZL12set_registerhPhh>
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	f7 01       	movw	r30, r14
    110c:	ea 5c       	subi	r30, 0xCA	; 202
    110e:	fd 4f       	sbci	r31, 0xFD	; 253
    1110:	80 83       	st	Z, r24
    1112:	41 e0       	ldi	r20, 0x01	; 1
    1114:	be 01       	movw	r22, r28
    1116:	6f 5f       	subi	r22, 0xFF	; 255
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	cf de       	rcall	.-610    	; 0xebc <_ZL12get_registerhPhh>
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	08 2b       	or	r16, r24
    1122:	09 83       	std	Y+1, r16	; 0x01
    1124:	e1 cf       	rjmp	.-62     	; 0x10e8 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x92>
    1126:	19 82       	std	Y+1, r1	; 0x01
    1128:	41 e0       	ldi	r20, 0x01	; 1
    112a:	be 01       	movw	r22, r28
    112c:	6f 5f       	subi	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	81 e1       	ldi	r24, 0x11	; 17
    1132:	8d 0d       	add	r24, r13
    1134:	75 de       	rcall	.-790    	; 0xe20 <_ZL12set_registerhPhh>
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	f7 01       	movw	r30, r14
    113a:	ea 5c       	subi	r30, 0xCA	; 202
    113c:	fd 4f       	sbci	r31, 0xFD	; 253
    113e:	80 83       	st	Z, r24
    1140:	41 e0       	ldi	r20, 0x01	; 1
    1142:	be 01       	movw	r22, r28
    1144:	6f 5f       	subi	r22, 0xFF	; 255
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	b8 de       	rcall	.-656    	; 0xebc <_ZL12get_registerhPhh>
    114c:	00 95       	com	r16
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	08 23       	and	r16, r24
    1152:	09 83       	std	Y+1, r16	; 0x01
    1154:	c9 cf       	rjmp	.-110    	; 0x10e8 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed+0x92>
    1156:	0f 90       	pop	r0
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	08 95       	ret

0000116a <_Z17Radio_Set_Tx_AddrPh>:
    116a:	fc 01       	movw	r30, r24
    116c:	80 81       	ld	r24, Z
    116e:	80 93 31 02 	sts	0x0231, r24
    1172:	81 81       	ldd	r24, Z+1	; 0x01
    1174:	80 93 32 02 	sts	0x0232, r24
    1178:	82 81       	ldd	r24, Z+2	; 0x02
    117a:	80 93 33 02 	sts	0x0233, r24
    117e:	83 81       	ldd	r24, Z+3	; 0x03
    1180:	80 93 34 02 	sts	0x0234, r24
    1184:	84 81       	ldd	r24, Z+4	; 0x04
    1186:	80 93 35 02 	sts	0x0235, r24
    118a:	45 e0       	ldi	r20, 0x05	; 5
    118c:	bf 01       	movw	r22, r30
    118e:	80 e1       	ldi	r24, 0x10	; 16
    1190:	47 ce       	rjmp	.-882    	; 0xe20 <_ZL12set_registerhPhh>
    1192:	08 95       	ret

00001194 <_Z15Radio_Configure9_radio_dr15_radio_tx_power>:
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	1f 92       	push	r1
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	08 2f       	mov	r16, r24
    11a4:	16 2f       	mov	r17, r22
    11a6:	64 30       	cpi	r22, 0x04	; 4
    11a8:	c8 f4       	brcc	.+50     	; 0x11dc <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x48>
    11aa:	82 30       	cpi	r24, 0x02	; 2
    11ac:	b8 f4       	brcc	.+46     	; 0x11dc <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x48>
    11ae:	41 e0       	ldi	r20, 0x01	; 1
    11b0:	be 01       	movw	r22, r28
    11b2:	6f 5f       	subi	r22, 0xFF	; 255
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255
    11b6:	86 e0       	ldi	r24, 0x06	; 6
    11b8:	81 de       	rcall	.-766    	; 0xebc <_ZL12get_registerhPhh>
    11ba:	11 0f       	add	r17, r17
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	86 60       	ori	r24, 0x06	; 6
    11c0:	18 23       	and	r17, r24
    11c2:	00 23       	and	r16, r16
    11c4:	19 f0       	breq	.+6      	; 0x11cc <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x38>
    11c6:	18 60       	ori	r17, 0x08	; 8
    11c8:	19 83       	std	Y+1, r17	; 0x01
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <_Z15Radio_Configure9_radio_dr15_radio_tx_power+0x3c>
    11cc:	17 7f       	andi	r17, 0xF7	; 247
    11ce:	19 83       	std	Y+1, r17	; 0x01
    11d0:	41 e0       	ldi	r20, 0x01	; 1
    11d2:	be 01       	movw	r22, r28
    11d4:	6f 5f       	subi	r22, 0xFF	; 255
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	86 e0       	ldi	r24, 0x06	; 6
    11da:	22 de       	rcall	.-956    	; 0xe20 <_ZL12set_registerhPhh>
    11dc:	0f 90       	pop	r0
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	08 95       	ret

000011e8 <_Z13Radio_ReceiveP3_rp>:
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	ec 01       	movw	r28, r24
    11ee:	10 92 99 0c 	sts	0x0C99, r1
    11f2:	e2 e0       	ldi	r30, 0x02	; 2
    11f4:	f1 e0       	ldi	r31, 0x01	; 1
    11f6:	80 81       	ld	r24, Z
    11f8:	8f 7d       	andi	r24, 0xDF	; 223
    11fa:	80 83       	st	Z, r24
    11fc:	02 de       	rcall	.-1020   	; 0xe02 <_ZL10get_statusv>
    11fe:	8e 70       	andi	r24, 0x0E	; 14
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	35 95       	asr	r19
    1206:	27 95       	ror	r18
    1208:	f9 01       	movw	r30, r18
    120a:	ff 27       	eor	r31, r31
    120c:	df 01       	movw	r26, r30
    120e:	aa 5c       	subi	r26, 0xCA	; 202
    1210:	bd 4f       	sbci	r27, 0xFD	; 253
    1212:	8c 91       	ld	r24, X
    1214:	81 32       	cpi	r24, 0x21	; 33
    1216:	70 f4       	brcc	.+28     	; 0x1234 <_Z13Radio_ReceiveP3_rp+0x4c>
    1218:	27 30       	cpi	r18, 0x07	; 7
    121a:	71 f0       	breq	.+28     	; 0x1238 <_Z13Radio_ReceiveP3_rp+0x50>
    121c:	fd 01       	movw	r30, r26
    121e:	20 81       	ld	r18, Z
    1220:	ae 01       	movw	r20, r28
    1222:	be 01       	movw	r22, r28
    1224:	81 e6       	ldi	r24, 0x61	; 97
    1226:	25 de       	rcall	.-950    	; 0xe72 <_ZL16send_instructionhPhS_h>
    1228:	ec dd       	rcall	.-1064   	; 0xe02 <_ZL10get_statusv>
    122a:	8e 70       	andi	r24, 0x0E	; 14
    122c:	8e 30       	cpi	r24, 0x0E	; 14
    122e:	31 f0       	breq	.+12     	; 0x123c <_Z13Radio_ReceiveP3_rp+0x54>
    1230:	83 e0       	ldi	r24, 0x03	; 3
    1232:	05 c0       	rjmp	.+10     	; 0x123e <_Z13Radio_ReceiveP3_rp+0x56>
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	03 c0       	rjmp	.+6      	; 0x123e <_Z13Radio_ReceiveP3_rp+0x56>
    1238:	82 e0       	ldi	r24, 0x02	; 2
    123a:	01 c0       	rjmp	.+2      	; 0x123e <_Z13Radio_ReceiveP3_rp+0x56>
    123c:	84 e0       	ldi	r24, 0x04	; 4
    123e:	e2 e0       	ldi	r30, 0x02	; 2
    1240:	f1 e0       	ldi	r31, 0x01	; 1
    1242:	90 81       	ld	r25, Z
    1244:	90 62       	ori	r25, 0x20	; 32
    1246:	90 83       	st	Z, r25
    1248:	10 92 99 0c 	sts	0x0C99, r1
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	08 95       	ret

00001252 <__vector_5>:
}


// Interrupt handler
ISR(INT4_vect)
{
    1252:	1f 92       	push	r1
    1254:	0f 92       	push	r0
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	0f 92       	push	r0
    125a:	11 24       	eor	r1, r1
    125c:	0b b6       	in	r0, 0x3b	; 59
    125e:	0f 92       	push	r0
    1260:	2f 93       	push	r18
    1262:	3f 93       	push	r19
    1264:	4f 93       	push	r20
    1266:	5f 93       	push	r21
    1268:	6f 93       	push	r22
    126a:	7f 93       	push	r23
    126c:	8f 93       	push	r24
    126e:	9f 93       	push	r25
    1270:	af 93       	push	r26
    1272:	bf 93       	push	r27
    1274:	ef 93       	push	r30
    1276:	ff 93       	push	r31
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	1f 92       	push	r1
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

	DEBUG_2_LOW;
    1282:	e2 e0       	ldi	r30, 0x02	; 2
    1284:	f1 e0       	ldi	r31, 0x01	; 1
    1286:	80 81       	ld	r24, Z
    1288:	8f 7e       	andi	r24, 0xEF	; 239
    128a:	80 83       	st	Z, r24
    CE_LOW();
    128c:	80 81       	ld	r24, Z
    128e:	8f 7d       	andi	r24, 0xDF	; 223
    1290:	80 83       	st	Z, r24

    status = get_status();
    1292:	b7 dd       	rcall	.-1170   	; 0xe02 <_ZL10get_statusv>
    1294:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR))
    1296:	86 ff       	sbrs	r24, 6
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <__vector_5+0x4e>
    {
    	pipe_number =  (status & 0xE) >> 1;
    129a:	8e 70       	andi	r24, 0x0E	; 14
    	radio_rxhandler(pipe_number);
    129c:	86 95       	lsr	r24
    129e:	6f d2       	rcall	.+1246   	; 0x177e <_Z15radio_rxhandlerh>
    }
    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS))
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	85 ff       	sbrs	r24, 5
    12a4:	1b c0       	rjmp	.+54     	; 0x12dc <__vector_5+0x8a>
    {
        // if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    12a6:	10 92 99 0c 	sts	0x0C99, r1
        reset_pipe0_address();
    12aa:	d9 dd       	rcall	.-1102   	; 0xe5e <_ZL19reset_pipe0_addressv>
        set_rx_mode();
    12ac:	34 de       	rcall	.-920    	; 0xf16 <_ZL11set_rx_modev>

    	// indicate in the history that a packet was transmitted successfully by appending a 1.
    	tx_history <<= 1;
    12ae:	80 91 2a 02 	lds	r24, 0x022A
    12b2:	90 91 2b 02 	lds	r25, 0x022B
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	90 93 2b 02 	sts	0x022B, r25
    12be:	80 93 2a 02 	sts	0x022A, r24
    	tx_history |= 1;
    12c2:	80 91 2a 02 	lds	r24, 0x022A
    12c6:	90 91 2b 02 	lds	r25, 0x022B
    12ca:	81 60       	ori	r24, 0x01	; 1
    12cc:	90 93 2b 02 	sts	0x022B, r25
    12d0:	80 93 2a 02 	sts	0x022A, r24

    	tx_last_status = RADIO_TX_SUCCESS;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	80 93 29 02 	sts	0x0229, r24
    12da:	19 c0       	rjmp	.+50     	; 0x130e <__vector_5+0xbc>
    }
    else if (status & _BV(MAX_RT))
    12dc:	84 ff       	sbrs	r24, 4
    12de:	17 c0       	rjmp	.+46     	; 0x130e <__vector_5+0xbc>
    {
        send_instruction(FLUSH_TX, NULL, NULL, 0);
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	81 ee       	ldi	r24, 0xE1	; 225
    12ec:	c2 dd       	rcall	.-1148   	; 0xe72 <_ZL16send_instructionhPhS_h>

    	transmit_lock = 0;
    12ee:	10 92 99 0c 	sts	0x0C99, r1
    	reset_pipe0_address();
    12f2:	b5 dd       	rcall	.-1174   	; 0xe5e <_ZL19reset_pipe0_addressv>
		set_rx_mode();
    12f4:	10 de       	rcall	.-992    	; 0xf16 <_ZL11set_rx_modev>
    	// indicate in the history that a packet was dropped by appending a 0.
    	tx_history <<= 1;
    12f6:	80 91 2a 02 	lds	r24, 0x022A
    12fa:	90 91 2b 02 	lds	r25, 0x022B
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	90 93 2b 02 	sts	0x022B, r25
    1306:	80 93 2a 02 	sts	0x022A, r24

    	tx_last_status = RADIO_TX_MAX_RT;
    130a:	10 92 29 02 	sts	0x0229, r1
    }
	
    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    130e:	80 e7       	ldi	r24, 0x70	; 112
    1310:	89 83       	std	Y+1, r24	; 0x01
	set_register(STATUS, &status, 1);
    1312:	41 e0       	ldi	r20, 0x01	; 1
    1314:	be 01       	movw	r22, r28
    1316:	6f 5f       	subi	r22, 0xFF	; 255
    1318:	7f 4f       	sbci	r23, 0xFF	; 255
    131a:	87 e0       	ldi	r24, 0x07	; 7
    131c:	81 dd       	rcall	.-1278   	; 0xe20 <_ZL12set_registerhPhh>
	DEBUG_2_HIGH;
    131e:	e2 e0       	ldi	r30, 0x02	; 2
    1320:	f1 e0       	ldi	r31, 0x01	; 1
    1322:	80 81       	ld	r24, Z
    1324:	80 61       	ori	r24, 0x10	; 16
    1326:	80 83       	st	Z, r24
	
    CE_HIGH();
    1328:	80 81       	ld	r24, Z
    132a:	80 62       	ori	r24, 0x20	; 32
    132c:	80 83       	st	Z, r24
}
    132e:	0f 90       	pop	r0
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	ff 91       	pop	r31
    1336:	ef 91       	pop	r30
    1338:	bf 91       	pop	r27
    133a:	af 91       	pop	r26
    133c:	9f 91       	pop	r25
    133e:	8f 91       	pop	r24
    1340:	7f 91       	pop	r23
    1342:	6f 91       	pop	r22
    1344:	5f 91       	pop	r21
    1346:	4f 91       	pop	r20
    1348:	3f 91       	pop	r19
    134a:	2f 91       	pop	r18
    134c:	0f 90       	pop	r0
    134e:	0b be       	out	0x3b, r0	; 59
    1350:	0f 90       	pop	r0
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	0f 90       	pop	r0
    1356:	1f 90       	pop	r1
    1358:	18 95       	reti

0000135a <_Z8SPI_Initv>:
	// The DDR operations are pretty fragile and doing this less awkwardly breaks SPI.  I don't care enough
	// to figure out why right now.  Note that SPI_SS is the actual SPI port's SS pin, which is not necessarily
	// the SS pin that's used for a given slave.  Anything that uses this driver must handle its own slave selection.
	// It must set its SS pin direction to output, set the pin low before doing an SPI operation, and set it high
	// when the SPI operation is complete.
    SPI_DDR &= ~(_BV(SPI_MOSI)|_BV(SPI_MISO)|_BV(SPI_SS)|_BV(SPI_SCK));
    135a:	84 b1       	in	r24, 0x04	; 4
    135c:	80 7f       	andi	r24, 0xF0	; 240
    135e:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= (_BV(SPI_MOSI) | _BV(SPI_SS) | _BV(SPI_SCK));
    1360:	84 b1       	in	r24, 0x04	; 4
    1362:	87 60       	ori	r24, 0x07	; 7
    1364:	84 b9       	out	0x04, r24	; 4
	 * SPR1 | SPR0 - Determines SCK frequency along with the SPI2X bit in SPSR.  See Table 17-4 in hardware manual [p178].
	 * bit 0
	 */

    // Set the AT90's SS pin high during config (this disables the Flash RAM or something)
    SPI_PORT |= _BV(SPI_SS);
    1366:	28 9a       	sbi	0x05, 0	; 5

	SPCR = _BV(SPE) | _BV(MSTR);	// enable SPI, set as master, set prescaler to f(osc)/4
    1368:	80 e5       	ldi	r24, 0x50	; 80
    136a:	8c bd       	out	0x2c, r24	; 44

	SPSR = _BV(SPI2X);							// Double SCK to f(osc)/2 (4 MHz)
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	8d bd       	out	0x2d, r24	; 45

	SPI_PORT &= ~_BV(SPI_SS);
    1370:	28 98       	cbi	0x05, 0	; 5
    1372:	08 95       	ret

00001374 <_Z19SPI_ReadWrite_BlockPhS_h>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1374:	44 23       	and	r20, r20
    1376:	81 f0       	breq	.+32     	; 0x1398 <_Z19SPI_ReadWrite_BlockPhS_h+0x24>
    1378:	28 2f       	mov	r18, r24
    137a:	a6 2f       	mov	r26, r22
    137c:	b7 2f       	mov	r27, r23
    137e:	e8 2f       	mov	r30, r24
    1380:	f9 2f       	mov	r31, r25
          SPDR = data[i];
    1382:	81 91       	ld	r24, Z+
    1384:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
    1386:	0d b4       	in	r0, 0x2d	; 45
    1388:	07 fe       	sbrs	r0, 7
    138a:	fd cf       	rjmp	.-6      	; 0x1386 <_Z19SPI_ReadWrite_BlockPhS_h+0x12>
          buffer[i] = SPDR;
    138c:	8e b5       	in	r24, 0x2e	; 46
    138e:	8d 93       	st	X+, r24
    1390:	8e 2f       	mov	r24, r30
    1392:	82 1b       	sub	r24, r18
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1394:	84 17       	cp	r24, r20
    1396:	a8 f3       	brcs	.-22     	; 0x1382 <_Z19SPI_ReadWrite_BlockPhS_h+0xe>
    1398:	08 95       	ret

0000139a <_Z15SPI_Write_BlockPhh>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    139a:	66 23       	and	r22, r22
    139c:	61 f0       	breq	.+24     	; 0x13b6 <_Z15SPI_Write_BlockPhh+0x1c>
    139e:	28 2f       	mov	r18, r24
    13a0:	e8 2f       	mov	r30, r24
    13a2:	f9 2f       	mov	r31, r25
          SPDR = data[i];
    13a4:	81 91       	ld	r24, Z+
    13a6:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
    13a8:	0d b4       	in	r0, 0x2d	; 45
    13aa:	07 fe       	sbrs	r0, 7
    13ac:	fd cf       	rjmp	.-6      	; 0x13a8 <_Z15SPI_Write_BlockPhh+0xe>
    13ae:	8e 2f       	mov	r24, r30
    13b0:	82 1b       	sub	r24, r18
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    13b2:	86 17       	cp	r24, r22
    13b4:	b8 f3       	brcs	.-18     	; 0x13a4 <_Z15SPI_Write_BlockPhh+0xa>
    13b6:	08 95       	ret

000013b8 <_Z14SPI_Write_Byteh>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    13b8:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    13ba:	0d b4       	in	r0, 0x2d	; 45
    13bc:	07 fe       	sbrs	r0, 7
    13be:	fd cf       	rjmp	.-6      	; 0x13ba <_Z14SPI_Write_Byteh+0x2>
    return SPDR;
    13c0:	8e b5       	in	r24, 0x2e	; 46
}
    13c2:	08 95       	ret

000013c4 <_Z11Roomba_Initv>:
		sensor_packet->capacity.bytes.high_byte = uart_get_byte(8);
		sensor_packet->capacity.bytes.low_byte = uart_get_byte(9);
		break;
	}
	uart_reset_receive();
}
    13c4:	f8 94       	cli
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	8a b9       	out	0x0a, r24	; 10
    13ca:	1b b8       	out	0x0b, r1	; 11
    13cc:	2f e9       	ldi	r18, 0x9F	; 159
    13ce:	86 e8       	ldi	r24, 0x86	; 134
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	21 50       	subi	r18, 0x01	; 1
    13d4:	80 40       	sbci	r24, 0x00	; 0
    13d6:	90 40       	sbci	r25, 0x00	; 0
    13d8:	e1 f7       	brne	.-8      	; 0x13d2 <_Z11Roomba_Initv+0xe>
    13da:	00 c0       	rjmp	.+0      	; 0x13dc <_Z11Roomba_Initv+0x18>
    13dc:	00 00       	nop
    13de:	59 9a       	sbi	0x0b, 1	; 11
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
    13e2:	87 b9       	out	0x07, r24	; 7
    13e4:	88 b1       	in	r24, 0x08	; 8
    13e6:	8c 63       	ori	r24, 0x3C	; 60
    13e8:	88 b9       	out	0x08, r24	; 8
    13ea:	ea e0       	ldi	r30, 0x0A	; 10
    13ec:	f1 e0       	ldi	r31, 0x01	; 1
    13ee:	80 81       	ld	r24, Z
    13f0:	84 60       	ori	r24, 0x04	; 4
    13f2:	80 83       	st	Z, r24
    13f4:	eb e0       	ldi	r30, 0x0B	; 11
    13f6:	f1 e0       	ldi	r31, 0x01	; 1
    13f8:	80 81       	ld	r24, Z
    13fa:	8b 7f       	andi	r24, 0xFB	; 251
    13fc:	80 83       	st	Z, r24
    13fe:	2f e9       	ldi	r18, 0x9F	; 159
    1400:	86 e8       	ldi	r24, 0x86	; 134
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	21 50       	subi	r18, 0x01	; 1
    1406:	80 40       	sbci	r24, 0x00	; 0
    1408:	90 40       	sbci	r25, 0x00	; 0
    140a:	e1 f7       	brne	.-8      	; 0x1404 <_Z11Roomba_Initv+0x40>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <_Z11Roomba_Initv+0x4a>
    140e:	00 00       	nop
    1410:	80 81       	ld	r24, Z
    1412:	84 60       	ori	r24, 0x04	; 4
    1414:	80 83       	st	Z, r24
    1416:	2f e9       	ldi	r18, 0x9F	; 159
    1418:	86 e8       	ldi	r24, 0x86	; 134
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	21 50       	subi	r18, 0x01	; 1
    141e:	80 40       	sbci	r24, 0x00	; 0
    1420:	90 40       	sbci	r25, 0x00	; 0
    1422:	e1 f7       	brne	.-8      	; 0x141c <_Z11Roomba_Initv+0x58>
    1424:	00 c0       	rjmp	.+0      	; 0x1426 <_Z11Roomba_Initv+0x62>
    1426:	00 00       	nop
    1428:	83 e0       	ldi	r24, 0x03	; 3
    142a:	68 d3       	rcall	.+1744   	; 0x1afc <_Z16Roomba_UART_Init9_uart_bps>
    142c:	80 e8       	ldi	r24, 0x80	; 128
    142e:	5e d3       	rcall	.+1724   	; 0x1aec <_Z16Roomba_Send_Byteh>
    1430:	87 e8       	ldi	r24, 0x87	; 135
    1432:	93 e1       	ldi	r25, 0x13	; 19
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	f1 f7       	brne	.-4      	; 0x1434 <_Z11Roomba_Initv+0x70>
    1438:	00 c0       	rjmp	.+0      	; 0x143a <_Z11Roomba_Initv+0x76>
    143a:	00 00       	nop
    143c:	81 e8       	ldi	r24, 0x81	; 129
    143e:	56 d3       	rcall	.+1708   	; 0x1aec <_Z16Roomba_Send_Byteh>
    1440:	87 e0       	ldi	r24, 0x07	; 7
    1442:	54 d3       	rcall	.+1704   	; 0x1aec <_Z16Roomba_Send_Byteh>
    1444:	87 ea       	ldi	r24, 0xA7	; 167
    1446:	91 e6       	ldi	r25, 0x61	; 97
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <_Z11Roomba_Initv+0x84>
    144c:	00 c0       	rjmp	.+0      	; 0x144e <_Z11Roomba_Initv+0x8a>
    144e:	00 00       	nop
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	54 d3       	rcall	.+1704   	; 0x1afc <_Z16Roomba_UART_Init9_uart_bps>
    1454:	80 e8       	ldi	r24, 0x80	; 128
    1456:	4a d3       	rcall	.+1684   	; 0x1aec <_Z16Roomba_Send_Byteh>
    1458:	87 e8       	ldi	r24, 0x87	; 135
    145a:	93 e1       	ldi	r25, 0x13	; 19
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <_Z11Roomba_Initv+0x98>
    1460:	00 c0       	rjmp	.+0      	; 0x1462 <_Z11Roomba_Initv+0x9e>
    1462:	00 00       	nop
    1464:	83 e8       	ldi	r24, 0x83	; 131
    1466:	42 d3       	rcall	.+1668   	; 0x1aec <_Z16Roomba_Send_Byteh>
    1468:	87 e8       	ldi	r24, 0x87	; 135
    146a:	93 e1       	ldi	r25, 0x13	; 19
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <_Z11Roomba_Initv+0xa8>
    1470:	00 c0       	rjmp	.+0      	; 0x1472 <_Z11Roomba_Initv+0xae>
    1472:	00 00       	nop
    1474:	0e 94 93 00 	call	0x126	; 0x126 <_Z7IR_initv>
    1478:	9f e7       	ldi	r25, 0x7F	; 127
    147a:	2a e1       	ldi	r18, 0x1A	; 26
    147c:	86 e0       	ldi	r24, 0x06	; 6
    147e:	91 50       	subi	r25, 0x01	; 1
    1480:	20 40       	sbci	r18, 0x00	; 0
    1482:	80 40       	sbci	r24, 0x00	; 0
    1484:	e1 f7       	brne	.-8      	; 0x147e <_Z11Roomba_Initv+0xba>
    1486:	00 c0       	rjmp	.+0      	; 0x1488 <_Z11Roomba_Initv+0xc4>
    1488:	00 00       	nop
    148a:	67 dd       	rcall	.-1330   	; 0xf5a <_Z10Radio_Initv>
    148c:	41 e0       	ldi	r20, 0x01	; 1
    148e:	6f e0       	ldi	r22, 0x0F	; 15
    1490:	72 e0       	ldi	r23, 0x02	; 2
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	e0 dd       	rcall	.-1088   	; 0x1056 <_Z18Radio_Configure_Rx11_radio_pipePh3_ed>
    1496:	63 e0       	ldi	r22, 0x03	; 3
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	7c de       	rcall	.-776    	; 0x1194 <_Z15Radio_Configure9_radio_dr15_radio_tx_power>
    149c:	84 e1       	ldi	r24, 0x14	; 20
    149e:	92 e0       	ldi	r25, 0x02	; 2
    14a0:	64 de       	rcall	.-824    	; 0x116a <_Z17Radio_Set_Tx_AddrPh>
    14a2:	78 94       	sei
    14a4:	08 95       	ret

000014a6 <_Z12Roomba_Driveii>:

void Roomba_Drive( int16_t velocity, int16_t radius )
{
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	18 2f       	mov	r17, r24
    14b0:	09 2f       	mov	r16, r25
    14b2:	c6 2f       	mov	r28, r22
    14b4:	d7 2f       	mov	r29, r23
	Roomba_Send_Byte(DRIVE);
    14b6:	89 e8       	ldi	r24, 0x89	; 137
    14b8:	19 d3       	rcall	.+1586   	; 0x1aec <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(HIGH_BYTE(velocity));
    14ba:	80 2f       	mov	r24, r16
    14bc:	17 d3       	rcall	.+1582   	; 0x1aec <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(LOW_BYTE(velocity));
    14be:	81 2f       	mov	r24, r17
    14c0:	15 d3       	rcall	.+1578   	; 0x1aec <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(HIGH_BYTE(radius));
    14c2:	8d 2f       	mov	r24, r29
    14c4:	13 d3       	rcall	.+1574   	; 0x1aec <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(LOW_BYTE(radius));
    14c6:	8c 2f       	mov	r24, r28
    14c8:	11 d3       	rcall	.+1570   	; 0x1aec <_Z16Roomba_Send_Byteh>
}
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	08 95       	ret

000014d4 <_Z11Roomba_Song11song_struct>:


void Roomba_Song(song_t song) {
    14d4:	cf 92       	push	r12
    14d6:	df 92       	push	r13
    14d8:	ef 92       	push	r14
    14da:	ff 92       	push	r15
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <_Z11Roomba_Song11song_struct+0x12>
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <_Z11Roomba_Song11song_struct+0x14>
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	49 83       	std	Y+1, r20	; 0x01
    14ee:	5a 83       	std	Y+2, r21	; 0x02
    14f0:	6b 83       	std	Y+3, r22	; 0x03
    14f2:	7c 83       	std	Y+4, r23	; 0x04
    14f4:	8d 83       	std	Y+5, r24	; 0x05
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	cb 80       	ldd	r12, Y+3	; 0x03
    14fa:	dc 80       	ldd	r13, Y+4	; 0x04
    14fc:	ed 80       	ldd	r14, Y+5	; 0x05
    14fe:	fe 80       	ldd	r15, Y+6	; 0x06
	int i;
	Roomba_Send_Byte(SONG);
    1500:	8c e8       	ldi	r24, 0x8C	; 140
    1502:	f4 d2       	rcall	.+1512   	; 0x1aec <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(song.song_number);
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	f2 d2       	rcall	.+1508   	; 0x1aec <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(song.song_length);
    1508:	8c 2d       	mov	r24, r12
    150a:	f0 d2       	rcall	.+1504   	; 0x1aec <_Z16Roomba_Send_Byteh>
	
	for( i = 0; i < song.song_length; i++) {
    150c:	1c 14       	cp	r1, r12
    150e:	1d 04       	cpc	r1, r13
    1510:	84 f4       	brge	.+32     	; 0x1532 <_Z11Roomba_Song11song_struct+0x5e>
    1512:	87 01       	movw	r16, r14
    1514:	cc 0c       	add	r12, r12
    1516:	dd 1c       	adc	r13, r13
    1518:	ec 0c       	add	r14, r12
    151a:	fd 1c       	adc	r15, r13
		Roomba_Send_Byte(song.notes[i].note);
    151c:	f8 01       	movw	r30, r16
    151e:	80 81       	ld	r24, Z
    1520:	e5 d2       	rcall	.+1482   	; 0x1aec <_Z16Roomba_Send_Byteh>
		Roomba_Send_Byte(song.notes[i].duration);
    1522:	f8 01       	movw	r30, r16
    1524:	81 81       	ldd	r24, Z+1	; 0x01
    1526:	e2 d2       	rcall	.+1476   	; 0x1aec <_Z16Roomba_Send_Byteh>
    1528:	0e 5f       	subi	r16, 0xFE	; 254
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	Roomba_Send_Byte(SONG);
	Roomba_Send_Byte(song.song_number);
	Roomba_Send_Byte(song.song_length);
	
	for( i = 0; i < song.song_length; i++) {
    152c:	0e 15       	cp	r16, r14
    152e:	1f 05       	cpc	r17, r15
    1530:	a9 f7       	brne	.-22     	; 0x151c <_Z11Roomba_Song11song_struct+0x48>
		Roomba_Send_Byte(song.notes[i].note);
		Roomba_Send_Byte(song.notes[i].duration);
	}
}
    1532:	26 96       	adiw	r28, 0x06	; 6
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	df 90       	pop	r13
    154c:	cf 90       	pop	r12
    154e:	08 95       	ret

00001550 <_Z17Roomba_Write_SongPci>:

note_t* Roomba_Write_Song(char* notes_and_durations, int length) {
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
			
		}
		return notes;
	}
	return NULL;
}
    1560:	0d b7       	in	r16, 0x3d	; 61
    1562:	1e b7       	in	r17, 0x3e	; 62
}

note_t* Roomba_Write_Song(char* notes_and_durations, int length) {
	int i;
	int counter = 0;
	int note_count = length/2;
    1564:	fb 01       	movw	r30, r22
    1566:	77 23       	and	r23, r23
    1568:	0c f4       	brge	.+2      	; 0x156c <_Z17Roomba_Write_SongPci+0x1c>
    156a:	31 96       	adiw	r30, 0x01	; 1
    156c:	f5 95       	asr	r31
    156e:	e7 95       	ror	r30
	if(length % 2 == 0) {
    1570:	60 fd       	sbrc	r22, 0
    1572:	31 c0       	rjmp	.+98     	; 0x15d6 <_Z17Roomba_Write_SongPci+0x86>
    1574:	6d b7       	in	r22, 0x3d	; 61
    1576:	7e b7       	in	r23, 0x3e	; 62
		note_t notes[note_count];
    1578:	9f 01       	movw	r18, r30
    157a:	22 0f       	add	r18, r18
    157c:	33 1f       	adc	r19, r19
    157e:	4d b7       	in	r20, 0x3d	; 61
    1580:	5e b7       	in	r21, 0x3e	; 62
    1582:	42 1b       	sub	r20, r18
    1584:	53 0b       	sbc	r21, r19
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	5e bf       	out	0x3e, r21	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	4d bf       	out	0x3d, r20	; 61
    1590:	4f 5f       	subi	r20, 0xFF	; 255
    1592:	5f 4f       	sbci	r21, 0xFF	; 255
		for( i = 0; i < note_count; i++) {
    1594:	1e 16       	cp	r1, r30
    1596:	1f 06       	cpc	r1, r31
    1598:	b4 f4       	brge	.+44     	; 0x15c6 <_Z17Roomba_Write_SongPci+0x76>
    159a:	fa 01       	movw	r30, r20
    159c:	7c 01       	movw	r14, r24
    159e:	af ef       	ldi	r26, 0xFF	; 255
    15a0:	ea 1a       	sub	r14, r26
    15a2:	fa 0a       	sbc	r15, r26
    15a4:	24 0f       	add	r18, r20
    15a6:	35 1f       	adc	r19, r21
    15a8:	c7 01       	movw	r24, r14
    15aa:	01 97       	sbiw	r24, 0x01	; 1
			notes[i].note = notes_and_durations[counter++];
    15ac:	dc 01       	movw	r26, r24
    15ae:	8c 91       	ld	r24, X
    15b0:	80 83       	st	Z, r24
			notes[i].duration = notes_and_durations[counter++];
    15b2:	d7 01       	movw	r26, r14
    15b4:	8c 91       	ld	r24, X
    15b6:	81 83       	std	Z+1, r24	; 0x01
    15b8:	32 96       	adiw	r30, 0x02	; 2
    15ba:	b2 e0       	ldi	r27, 0x02	; 2
    15bc:	eb 0e       	add	r14, r27
    15be:	f1 1c       	adc	r15, r1
	int i;
	int counter = 0;
	int note_count = length/2;
	if(length % 2 == 0) {
		note_t notes[note_count];
		for( i = 0; i < note_count; i++) {
    15c0:	e2 17       	cp	r30, r18
    15c2:	f3 07       	cpc	r31, r19
    15c4:	89 f7       	brne	.-30     	; 0x15a8 <_Z17Roomba_Write_SongPci+0x58>
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	7e bf       	out	0x3e, r23	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	6d bf       	out	0x3d, r22	; 61
			notes[i].note = notes_and_durations[counter++];
			notes[i].duration = notes_and_durations[counter++];
			
		}
		return notes;
    15d0:	84 2f       	mov	r24, r20
    15d2:	95 2f       	mov	r25, r21
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <_Z17Roomba_Write_SongPci+0x8a>
	}
	return NULL;
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
}
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	1e bf       	out	0x3e, r17	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	0d bf       	out	0x3d, r16	; 61
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	ff 90       	pop	r15
    15ee:	ef 90       	pop	r14
    15f0:	08 95       	ret

000015f2 <_Z11Roomba_Playi>:

void Roomba_Play(int16_t song_number) {
    15f2:	cf 93       	push	r28
    15f4:	c8 2f       	mov	r28, r24
	Roomba_Send_Byte(PLAY);
    15f6:	8d e8       	ldi	r24, 0x8D	; 141
    15f8:	79 d2       	rcall	.+1266   	; 0x1aec <_Z16Roomba_Send_Byteh>
	Roomba_Send_Byte(song_number);
    15fa:	8c 2f       	mov	r24, r28
    15fc:	77 d2       	rcall	.+1262   	; 0x1aec <_Z16Roomba_Send_Byteh>
}
    15fe:	cf 91       	pop	r28
    1600:	08 95       	ret

00001602 <_Z13sys_game_overv>:
	return state;
}

int isEmpty_network_queue() {
	return !queue_head;
}
    1602:	80 91 a1 0c 	lds	r24, 0x0CA1
    1606:	90 91 a2 0c 	lds	r25, 0x0CA2
    160a:	89 2b       	or	r24, r25
    160c:	31 f4       	brne	.+12     	; 0x161a <_Z13sys_game_overv+0x18>
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	80 e4       	ldi	r24, 0x40	; 64
    1614:	9b e0       	ldi	r25, 0x0B	; 11
    1616:	0c 94 82 02 	jmp	0x504	; 0x504 <Task_Create_System>
    161a:	08 95       	ret

0000161c <_Z14rr_startRotatev>:
    161c:	8a ef       	ldi	r24, 0xFA	; 250
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	90 93 a0 0c 	sts	0x0CA0, r25
    1624:	80 93 9f 0c 	sts	0x0C9F, r24
    1628:	8f ef       	ldi	r24, 0xFF	; 255
    162a:	9f ef       	ldi	r25, 0xFF	; 255
    162c:	90 93 9e 0c 	sts	0x0C9E, r25
    1630:	80 93 9d 0c 	sts	0x0C9D, r24
    1634:	60 91 9d 0c 	lds	r22, 0x0C9D
    1638:	70 91 9e 0c 	lds	r23, 0x0C9E
    163c:	80 91 9f 0c 	lds	r24, 0x0C9F
    1640:	90 91 a0 0c 	lds	r25, 0x0CA0
    1644:	30 df       	rcall	.-416    	; 0x14a6 <_Z12Roomba_Driveii>
    1646:	0c 94 c6 02 	jmp	0x58c	; 0x58c <Task_Terminate>
    164a:	08 95       	ret

0000164c <_Z8pp_shootv>:
    164c:	80 91 a1 0c 	lds	r24, 0x0CA1
    1650:	90 91 a2 0c 	lds	r25, 0x0CA2
    1654:	89 2b       	or	r24, r25
    1656:	89 f4       	brne	.+34     	; 0x167a <_Z8pp_shootv+0x2e>
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	22 df       	rcall	.-444    	; 0x14a6 <_Z12Roomba_Driveii>
    1662:	81 e4       	ldi	r24, 0x41	; 65
    1664:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_Z11IR_transmith>
    1668:	60 91 9d 0c 	lds	r22, 0x0C9D
    166c:	70 91 9e 0c 	lds	r23, 0x0C9E
    1670:	80 91 9f 0c 	lds	r24, 0x0C9F
    1674:	90 91 a0 0c 	lds	r25, 0x0CA0
    1678:	16 df       	rcall	.-468    	; 0x14a6 <_Z12Roomba_Driveii>
    167a:	0e 94 b4 02 	call	0x568	; 0x568 <Task_Next>
    167e:	e6 cf       	rjmp	.-52     	; 0x164c <_Z8pp_shootv>

00001680 <_Z16sys_play_preludev>:
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	b6 df       	rcall	.-148    	; 0x15f2 <_Z11Roomba_Playi>
    1686:	2f ef       	ldi	r18, 0xFF	; 255
    1688:	84 e3       	ldi	r24, 0x34	; 52
    168a:	9c e0       	ldi	r25, 0x0C	; 12
    168c:	21 50       	subi	r18, 0x01	; 1
    168e:	80 40       	sbci	r24, 0x00	; 0
    1690:	90 40       	sbci	r25, 0x00	; 0
    1692:	e1 f7       	brne	.-8      	; 0x168c <_Z16sys_play_preludev+0xc>
    1694:	00 c0       	rjmp	.+0      	; 0x1696 <_Z16sys_play_preludev+0x16>
    1696:	00 00       	nop
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	aa df       	rcall	.-172    	; 0x15f2 <_Z11Roomba_Playi>
    169e:	2f ef       	ldi	r18, 0xFF	; 255
    16a0:	84 e3       	ldi	r24, 0x34	; 52
    16a2:	9c e0       	ldi	r25, 0x0C	; 12
    16a4:	21 50       	subi	r18, 0x01	; 1
    16a6:	80 40       	sbci	r24, 0x00	; 0
    16a8:	90 40       	sbci	r25, 0x00	; 0
    16aa:	e1 f7       	brne	.-8      	; 0x16a4 <_Z16sys_play_preludev+0x24>
    16ac:	00 c0       	rjmp	.+0      	; 0x16ae <_Z16sys_play_preludev+0x2e>
    16ae:	00 00       	nop
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9e df       	rcall	.-196    	; 0x15f2 <_Z11Roomba_Playi>
    16b6:	2f ef       	ldi	r18, 0xFF	; 255
    16b8:	84 e3       	ldi	r24, 0x34	; 52
    16ba:	9c e0       	ldi	r25, 0x0C	; 12
    16bc:	21 50       	subi	r18, 0x01	; 1
    16be:	80 40       	sbci	r24, 0x00	; 0
    16c0:	90 40       	sbci	r25, 0x00	; 0
    16c2:	e1 f7       	brne	.-8      	; 0x16bc <_Z16sys_play_preludev+0x3c>
    16c4:	00 c0       	rjmp	.+0      	; 0x16c6 <_Z16sys_play_preludev+0x46>
    16c6:	00 00       	nop
    16c8:	83 e0       	ldi	r24, 0x03	; 3
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	92 df       	rcall	.-220    	; 0x15f2 <_Z11Roomba_Playi>
    16ce:	0e 94 b4 02 	call	0x568	; 0x568 <Task_Next>
    16d2:	d6 cf       	rjmp	.-84     	; 0x1680 <_Z16sys_play_preludev>

000016d4 <_Z12ir_rxhandlerh>:
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	90 93 9a 0c 	sts	0x0C9A, r25
    16da:	80 93 9b 0c 	sts	0x0C9B, r24
    16de:	08 95       	ret

000016e0 <_Z6revivev>:
    16e0:	10 92 a2 0c 	sts	0x0CA2, r1
    16e4:	10 92 a1 0c 	sts	0x0CA1, r1
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	8e e0       	ldi	r24, 0x0E	; 14
    16ee:	9b e0       	ldi	r25, 0x0B	; 11
    16f0:	0c 94 9b 02 	jmp	0x536	; 0x536 <Task_Create_RR>
    16f4:	08 95       	ret

000016f6 <_Z18push_network_queue7_gs_pkt>:
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <_Z18push_network_queue7_gs_pkt+0x6>
    16fc:	1f 92       	push	r1
    16fe:	1f 92       	push	r1
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	49 83       	std	Y+1, r20	; 0x01
    1706:	5a 83       	std	Y+2, r21	; 0x02
    1708:	6b 83       	std	Y+3, r22	; 0x03
    170a:	7c 83       	std	Y+4, r23	; 0x04
    170c:	8d 83       	std	Y+5, r24	; 0x05
    170e:	a0 91 3e 02 	lds	r26, 0x023E
    1712:	b0 91 3f 02 	lds	r27, 0x023F
    1716:	85 e0       	ldi	r24, 0x05	; 5
    1718:	fe 01       	movw	r30, r28
    171a:	31 96       	adiw	r30, 0x01	; 1
    171c:	01 90       	ld	r0, Z+
    171e:	0d 92       	st	X+, r0
    1720:	8a 95       	dec	r24
    1722:	e1 f7       	brne	.-8      	; 0x171c <_Z18push_network_queue7_gs_pkt+0x26>
    1724:	80 91 a4 0c 	lds	r24, 0x0CA4
    1728:	90 91 a5 0c 	lds	r25, 0x0CA5
    172c:	89 2b       	or	r24, r25
    172e:	41 f4       	brne	.+16     	; 0x1740 <_Z18push_network_queue7_gs_pkt+0x4a>
    1730:	80 91 3e 02 	lds	r24, 0x023E
    1734:	90 91 3f 02 	lds	r25, 0x023F
    1738:	90 93 a5 0c 	sts	0x0CA5, r25
    173c:	80 93 a4 0c 	sts	0x0CA4, r24
    1740:	80 91 3e 02 	lds	r24, 0x023E
    1744:	90 91 3f 02 	lds	r25, 0x023F
    1748:	20 91 3c 02 	lds	r18, 0x023C
    174c:	30 91 3d 02 	lds	r19, 0x023D
    1750:	82 17       	cp	r24, r18
    1752:	93 07       	cpc	r25, r19
    1754:	39 f4       	brne	.+14     	; 0x1764 <_Z18push_network_queue7_gs_pkt+0x6e>
    1756:	86 ea       	ldi	r24, 0xA6	; 166
    1758:	9c e0       	ldi	r25, 0x0C	; 12
    175a:	90 93 3f 02 	sts	0x023F, r25
    175e:	80 93 3e 02 	sts	0x023E, r24
    1762:	05 c0       	rjmp	.+10     	; 0x176e <_Z18push_network_queue7_gs_pkt+0x78>
    1764:	05 96       	adiw	r24, 0x05	; 5
    1766:	90 93 3f 02 	sts	0x023F, r25
    176a:	80 93 3e 02 	sts	0x023E, r24
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	08 95       	ret

0000177e <_Z15radio_rxhandlerh>:
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	a0 97       	sbiw	r28, 0x20	; 32
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	ce 01       	movw	r24, r28
    1796:	01 96       	adiw	r24, 0x01	; 1
    1798:	27 dd       	rcall	.-1458   	; 0x11e8 <_Z13Radio_ReceiveP3_rp>
    179a:	18 2f       	mov	r17, r24
    179c:	84 30       	cpi	r24, 0x04	; 4
    179e:	d1 f3       	breq	.-12     	; 0x1794 <_Z15radio_rxhandlerh+0x16>
    17a0:	4c 81       	ldd	r20, Y+4	; 0x04
    17a2:	5d 81       	ldd	r21, Y+5	; 0x05
    17a4:	6e 81       	ldd	r22, Y+6	; 0x06
    17a6:	7f 81       	ldd	r23, Y+7	; 0x07
    17a8:	88 85       	ldd	r24, Y+8	; 0x08
    17aa:	a5 df       	rcall	.-182    	; 0x16f6 <_Z18push_network_queue7_gs_pkt>
    17ac:	12 30       	cpi	r17, 0x02	; 2
    17ae:	91 f7       	brne	.-28     	; 0x1794 <_Z15radio_rxhandlerh+0x16>
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	80 93 9c 0c 	sts	0x0C9C, r24
    17b6:	a0 96       	adiw	r28, 0x20	; 32
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	08 95       	ret

000017ca <_Z17pop_network_queuev>:
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	2a 97       	sbiw	r28, 0x0a	; 10
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	80 91 a4 0c 	lds	r24, 0x0CA4
    17e2:	90 91 a5 0c 	lds	r25, 0x0CA5
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	51 f1       	breq	.+84     	; 0x183e <_Z17pop_network_queuev+0x74>
    17ea:	25 e0       	ldi	r18, 0x05	; 5
    17ec:	fc 01       	movw	r30, r24
    17ee:	de 01       	movw	r26, r28
    17f0:	16 96       	adiw	r26, 0x06	; 6
    17f2:	01 90       	ld	r0, Z+
    17f4:	0d 92       	st	X+, r0
    17f6:	2a 95       	dec	r18
    17f8:	e1 f7       	brne	.-8      	; 0x17f2 <_Z17pop_network_queuev+0x28>
    17fa:	20 91 3c 02 	lds	r18, 0x023C
    17fe:	30 91 3d 02 	lds	r19, 0x023D
    1802:	82 17       	cp	r24, r18
    1804:	93 07       	cpc	r25, r19
    1806:	39 f4       	brne	.+14     	; 0x1816 <_Z17pop_network_queuev+0x4c>
    1808:	86 ea       	ldi	r24, 0xA6	; 166
    180a:	9c e0       	ldi	r25, 0x0C	; 12
    180c:	90 93 a5 0c 	sts	0x0CA5, r25
    1810:	80 93 a4 0c 	sts	0x0CA4, r24
    1814:	05 c0       	rjmp	.+10     	; 0x1820 <_Z17pop_network_queuev+0x56>
    1816:	05 96       	adiw	r24, 0x05	; 5
    1818:	90 93 a5 0c 	sts	0x0CA5, r25
    181c:	80 93 a4 0c 	sts	0x0CA4, r24
    1820:	20 91 a4 0c 	lds	r18, 0x0CA4
    1824:	30 91 a5 0c 	lds	r19, 0x0CA5
    1828:	80 91 3e 02 	lds	r24, 0x023E
    182c:	90 91 3f 02 	lds	r25, 0x023F
    1830:	28 17       	cp	r18, r24
    1832:	39 07       	cpc	r19, r25
    1834:	21 f4       	brne	.+8      	; 0x183e <_Z17pop_network_queuev+0x74>
    1836:	10 92 a5 0c 	sts	0x0CA5, r1
    183a:	10 92 a4 0c 	sts	0x0CA4, r1
    183e:	85 e0       	ldi	r24, 0x05	; 5
    1840:	fe 01       	movw	r30, r28
    1842:	36 96       	adiw	r30, 0x06	; 6
    1844:	de 01       	movw	r26, r28
    1846:	11 96       	adiw	r26, 0x01	; 1
    1848:	01 90       	ld	r0, Z+
    184a:	0d 92       	st	X+, r0
    184c:	8a 95       	dec	r24
    184e:	e1 f7       	brne	.-8      	; 0x1848 <_Z17pop_network_queuev+0x7e>
    1850:	29 81       	ldd	r18, Y+1	; 0x01
    1852:	3a 81       	ldd	r19, Y+2	; 0x02
    1854:	4b 81       	ldd	r20, Y+3	; 0x03
    1856:	5c 81       	ldd	r21, Y+4	; 0x04
    1858:	6d 81       	ldd	r22, Y+5	; 0x05
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	2a 96       	adiw	r28, 0x0a	; 10
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <_Z15pp_handlePacketv>:
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	00 d0       	rcall	.+0      	; 0x1878 <_Z15pp_handlePacketv+0x6>
    1878:	1f 92       	push	r1
    187a:	1f 92       	push	r1
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	80 91 9c 0c 	lds	r24, 0x0C9C
    1884:	88 23       	and	r24, r24
    1886:	99 f1       	breq	.+102    	; 0x18ee <_Z15pp_handlePacketv+0x7c>
    1888:	80 91 a4 0c 	lds	r24, 0x0CA4
    188c:	90 91 a5 0c 	lds	r25, 0x0CA5
    1890:	89 2b       	or	r24, r25
    1892:	69 f1       	breq	.+90     	; 0x18ee <_Z15pp_handlePacketv+0x7c>
    1894:	9a df       	rcall	.-204    	; 0x17ca <_Z17pop_network_queuev>
    1896:	29 83       	std	Y+1, r18	; 0x01
    1898:	3a 83       	std	Y+2, r19	; 0x02
    189a:	4b 83       	std	Y+3, r20	; 0x03
    189c:	5c 83       	std	Y+4, r21	; 0x04
    189e:	6d 83       	std	Y+5, r22	; 0x05
    18a0:	10 91 a3 0c 	lds	r17, 0x0CA3
    18a4:	21 17       	cp	r18, r17
    18a6:	e9 f0       	breq	.+58     	; 0x18e2 <_Z15pp_handlePacketv+0x70>
    18a8:	20 93 a3 0c 	sts	0x0CA3, r18
    18ac:	21 30       	cpi	r18, 0x01	; 1
    18ae:	19 f0       	breq	.+6      	; 0x18b6 <_Z15pp_handlePacketv+0x44>
    18b0:	22 30       	cpi	r18, 0x02	; 2
    18b2:	89 f0       	breq	.+34     	; 0x18d6 <_Z15pp_handlePacketv+0x64>
    18b4:	16 c0       	rjmp	.+44     	; 0x18e2 <_Z15pp_handlePacketv+0x70>
    18b6:	14 df       	rcall	.-472    	; 0x16e0 <_Z6revivev>
    18b8:	11 11       	cpse	r17, r1
    18ba:	13 c0       	rjmp	.+38     	; 0x18e2 <_Z15pp_handlePacketv+0x70>
    18bc:	04 e1       	ldi	r16, 0x14	; 20
    18be:	10 e0       	ldi	r17, 0x00	; 0
    18c0:	29 e1       	ldi	r18, 0x19	; 25
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	44 e6       	ldi	r20, 0x64	; 100
    18c6:	50 e0       	ldi	r21, 0x00	; 0
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	86 e2       	ldi	r24, 0x26	; 38
    18ce:	9b e0       	ldi	r25, 0x0B	; 11
    18d0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <Task_Create_Periodic>
    18d4:	06 c0       	rjmp	.+12     	; 0x18e2 <_Z15pp_handlePacketv+0x70>
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	9b e0       	ldi	r25, 0x0B	; 11
    18de:	0e 94 82 02 	call	0x504	; 0x504 <Task_Create_System>
    18e2:	80 91 a4 0c 	lds	r24, 0x0CA4
    18e6:	90 91 a5 0c 	lds	r25, 0x0CA5
    18ea:	89 2b       	or	r24, r25
    18ec:	99 f6       	brne	.-90     	; 0x1894 <_Z15pp_handlePacketv+0x22>
    18ee:	0e 94 b4 02 	call	0x568	; 0x568 <Task_Next>
    18f2:	c6 cf       	rjmp	.-116    	; 0x1880 <_Z15pp_handlePacketv+0xe>

000018f4 <_Z11setup_songsv>:

void setup_songs() {
    18f4:	cf 92       	push	r12
    18f6:	df 92       	push	r13
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	c8 59       	subi	r28, 0x98	; 152
    190a:	d1 09       	sbc	r29, r1
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
		65, 16,
		70, 16,
		72, 16,
		74, 16,
		77, 16
		};
    1916:	80 e2       	ldi	r24, 0x20	; 32
    1918:	e0 e4       	ldi	r30, 0x40	; 64
    191a:	f2 e0       	ldi	r31, 0x02	; 2
    191c:	de 01       	movw	r26, r28
    191e:	af 59       	subi	r26, 0x9F	; 159
    1920:	bf 4f       	sbci	r27, 0xFF	; 255
    1922:	01 90       	ld	r0, Z+
    1924:	0d 92       	st	X+, r0
    1926:	8a 95       	dec	r24
    1928:	e1 f7       	brne	.-8      	; 0x1922 <_Z11setup_songsv+0x2e>
		48, 16,
		46, 16,
		41, 16,
		38, 16,
		36, 16
	};
    192a:	80 e2       	ldi	r24, 0x20	; 32
    192c:	e0 e6       	ldi	r30, 0x60	; 96
    192e:	f2 e0       	ldi	r31, 0x02	; 2
    1930:	de 01       	movw	r26, r28
    1932:	af 5b       	subi	r26, 0xBF	; 191
    1934:	bf 4f       	sbci	r27, 0xFF	; 255
    1936:	01 90       	ld	r0, Z+
    1938:	0d 92       	st	X+, r0
    193a:	8a 95       	dec	r24
    193c:	e1 f7       	brne	.-8      	; 0x1936 <_Z11setup_songsv+0x42>
		62, 16,
		67, 16,
		69, 16,
		70, 16,
		74, 16
	};
    193e:	80 e2       	ldi	r24, 0x20	; 32
    1940:	e0 e8       	ldi	r30, 0x80	; 128
    1942:	f2 e0       	ldi	r31, 0x02	; 2
    1944:	de 01       	movw	r26, r28
    1946:	91 96       	adiw	r26, 0x21	; 33
    1948:	01 90       	ld	r0, Z+
    194a:	0d 92       	st	X+, r0
    194c:	8a 95       	dec	r24
    194e:	e1 f7       	brne	.-8      	; 0x1948 <_Z11setup_songsv+0x54>
		45, 16,
		43, 16,
		38, 16,
		46, 16,
		45, 16
	};
    1950:	80 e2       	ldi	r24, 0x20	; 32
    1952:	e0 ea       	ldi	r30, 0xA0	; 160
    1954:	f2 e0       	ldi	r31, 0x02	; 2
    1956:	de 01       	movw	r26, r28
    1958:	11 96       	adiw	r26, 0x01	; 1
    195a:	01 90       	ld	r0, Z+
    195c:	0d 92       	st	X+, r0
    195e:	8a 95       	dec	r24
    1960:	e1 f7       	brne	.-8      	; 0x195a <_Z11setup_songsv+0x66>
	note_t* noteptr_prelude_pt_1 = Roomba_Write_Song(prelude_pt_1_notes, 32);
    1962:	60 e2       	ldi	r22, 0x20	; 32
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	ce 01       	movw	r24, r28
    1968:	8f 59       	subi	r24, 0x9F	; 159
    196a:	9f 4f       	sbci	r25, 0xFF	; 255
    196c:	f1 dd       	rcall	.-1054   	; 0x1550 <_Z17Roomba_Write_SongPci>
    196e:	6c 01       	movw	r12, r24
	note_t* noteptr_prelude_pt_2 = Roomba_Write_Song(prelude_pt_2_notes, 32);
    1970:	60 e2       	ldi	r22, 0x20	; 32
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	ce 01       	movw	r24, r28
    1976:	8f 5b       	subi	r24, 0xBF	; 191
    1978:	9f 4f       	sbci	r25, 0xFF	; 255
    197a:	ea dd       	rcall	.-1068   	; 0x1550 <_Z17Roomba_Write_SongPci>
    197c:	7c 01       	movw	r14, r24
	note_t* noteptr_prelude_pt_3 = Roomba_Write_Song(prelude_pt_3_notes, 32);
    197e:	60 e2       	ldi	r22, 0x20	; 32
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	ce 01       	movw	r24, r28
    1984:	81 96       	adiw	r24, 0x21	; 33
    1986:	e4 dd       	rcall	.-1080   	; 0x1550 <_Z17Roomba_Write_SongPci>
    1988:	8c 01       	movw	r16, r24
	note_t* noteptr_prelude_pt_4 = Roomba_Write_Song(prelude_pt_4_notes, 32);
    198a:	60 e2       	ldi	r22, 0x20	; 32
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	ce 01       	movw	r24, r28
    1990:	01 96       	adiw	r24, 0x01	; 1
    1992:	de dd       	rcall	.-1092   	; 0x1550 <_Z17Roomba_Write_SongPci>

	song_t prelude_pt_1 = {0, 16, noteptr_prelude_pt_1};
    1994:	fe 01       	movw	r30, r28
    1996:	ed 56       	subi	r30, 0x6D	; 109
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	66 e0       	ldi	r22, 0x06	; 6
    199c:	df 01       	movw	r26, r30
    199e:	26 2f       	mov	r18, r22
    19a0:	1d 92       	st	X+, r1
    19a2:	2a 95       	dec	r18
    19a4:	e9 f7       	brne	.-6      	; 0x19a0 <_Z11setup_songsv+0xac>
    19a6:	20 e1       	ldi	r18, 0x10	; 16
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	33 83       	std	Z+3, r19	; 0x03
    19ac:	22 83       	std	Z+2, r18	; 0x02
    19ae:	d5 82       	std	Z+5, r13	; 0x05
    19b0:	c4 82       	std	Z+4, r12	; 0x04
	song_t prelude_pt_2 = {1, 16, noteptr_prelude_pt_2};
    19b2:	6e 01       	movw	r12, r28
    19b4:	4d e8       	ldi	r20, 0x8D	; 141
    19b6:	c4 0e       	add	r12, r20
    19b8:	d1 1c       	adc	r13, r1
    19ba:	d6 01       	movw	r26, r12
    19bc:	46 2f       	mov	r20, r22
    19be:	1d 92       	st	X+, r1
    19c0:	4a 95       	dec	r20
    19c2:	e9 f7       	brne	.-6      	; 0x19be <_Z11setup_songsv+0xca>
    19c4:	41 e0       	ldi	r20, 0x01	; 1
    19c6:	50 e0       	ldi	r21, 0x00	; 0
    19c8:	d6 01       	movw	r26, r12
    19ca:	11 96       	adiw	r26, 0x01	; 1
    19cc:	5c 93       	st	X, r21
    19ce:	4e 93       	st	-X, r20
    19d0:	13 96       	adiw	r26, 0x03	; 3
    19d2:	3c 93       	st	X, r19
    19d4:	2e 93       	st	-X, r18
    19d6:	12 97       	sbiw	r26, 0x02	; 2
    19d8:	15 96       	adiw	r26, 0x05	; 5
    19da:	fc 92       	st	X, r15
    19dc:	ee 92       	st	-X, r14
    19de:	14 97       	sbiw	r26, 0x04	; 4
	song_t prelude_pt_3 = {2, 16, noteptr_prelude_pt_3};
    19e0:	7e 01       	movw	r14, r28
    19e2:	b7 e8       	ldi	r27, 0x87	; 135
    19e4:	eb 0e       	add	r14, r27
    19e6:	f1 1c       	adc	r15, r1
    19e8:	d7 01       	movw	r26, r14
    19ea:	46 2f       	mov	r20, r22
    19ec:	1d 92       	st	X+, r1
    19ee:	4a 95       	dec	r20
    19f0:	e9 f7       	brne	.-6      	; 0x19ec <_Z11setup_songsv+0xf8>
    19f2:	42 e0       	ldi	r20, 0x02	; 2
    19f4:	50 e0       	ldi	r21, 0x00	; 0
    19f6:	d7 01       	movw	r26, r14
    19f8:	11 96       	adiw	r26, 0x01	; 1
    19fa:	5c 93       	st	X, r21
    19fc:	4e 93       	st	-X, r20
    19fe:	13 96       	adiw	r26, 0x03	; 3
    1a00:	3c 93       	st	X, r19
    1a02:	2e 93       	st	-X, r18
    1a04:	12 97       	sbiw	r26, 0x02	; 2
    1a06:	15 96       	adiw	r26, 0x05	; 5
    1a08:	1c 93       	st	X, r17
    1a0a:	0e 93       	st	-X, r16
    1a0c:	14 97       	sbiw	r26, 0x04	; 4
	song_t prelude_pt_4 = {3, 16, noteptr_prelude_pt_4};
    1a0e:	8e 01       	movw	r16, r28
    1a10:	0f 57       	subi	r16, 0x7F	; 127
    1a12:	1f 4f       	sbci	r17, 0xFF	; 255
    1a14:	d8 01       	movw	r26, r16
    1a16:	1d 92       	st	X+, r1
    1a18:	6a 95       	dec	r22
    1a1a:	e9 f7       	brne	.-6      	; 0x1a16 <_Z11setup_songsv+0x122>
    1a1c:	43 e0       	ldi	r20, 0x03	; 3
    1a1e:	50 e0       	ldi	r21, 0x00	; 0
    1a20:	d8 01       	movw	r26, r16
    1a22:	11 96       	adiw	r26, 0x01	; 1
    1a24:	5c 93       	st	X, r21
    1a26:	4e 93       	st	-X, r20
    1a28:	13 96       	adiw	r26, 0x03	; 3
    1a2a:	3c 93       	st	X, r19
    1a2c:	2e 93       	st	-X, r18
    1a2e:	12 97       	sbiw	r26, 0x02	; 2
    1a30:	15 96       	adiw	r26, 0x05	; 5
    1a32:	9c 93       	st	X, r25
    1a34:	8e 93       	st	-X, r24
    1a36:	14 97       	sbiw	r26, 0x04	; 4
		
	Roomba_Song(prelude_pt_1);
    1a38:	40 81       	ld	r20, Z
    1a3a:	51 81       	ldd	r21, Z+1	; 0x01
    1a3c:	62 81       	ldd	r22, Z+2	; 0x02
    1a3e:	73 81       	ldd	r23, Z+3	; 0x03
    1a40:	84 81       	ldd	r24, Z+4	; 0x04
    1a42:	95 81       	ldd	r25, Z+5	; 0x05
    1a44:	47 dd       	rcall	.-1394   	; 0x14d4 <_Z11Roomba_Song11song_struct>
	Roomba_Song(prelude_pt_2);
    1a46:	f6 01       	movw	r30, r12
    1a48:	40 81       	ld	r20, Z
    1a4a:	51 81       	ldd	r21, Z+1	; 0x01
    1a4c:	62 81       	ldd	r22, Z+2	; 0x02
    1a4e:	73 81       	ldd	r23, Z+3	; 0x03
    1a50:	84 81       	ldd	r24, Z+4	; 0x04
    1a52:	95 81       	ldd	r25, Z+5	; 0x05
    1a54:	3f dd       	rcall	.-1410   	; 0x14d4 <_Z11Roomba_Song11song_struct>
	Roomba_Song(prelude_pt_3);
    1a56:	d7 01       	movw	r26, r14
    1a58:	4c 91       	ld	r20, X
    1a5a:	11 96       	adiw	r26, 0x01	; 1
    1a5c:	5c 91       	ld	r21, X
    1a5e:	11 97       	sbiw	r26, 0x01	; 1
    1a60:	12 96       	adiw	r26, 0x02	; 2
    1a62:	6c 91       	ld	r22, X
    1a64:	12 97       	sbiw	r26, 0x02	; 2
    1a66:	13 96       	adiw	r26, 0x03	; 3
    1a68:	7c 91       	ld	r23, X
    1a6a:	13 97       	sbiw	r26, 0x03	; 3
    1a6c:	14 96       	adiw	r26, 0x04	; 4
    1a6e:	8c 91       	ld	r24, X
    1a70:	14 97       	sbiw	r26, 0x04	; 4
    1a72:	15 96       	adiw	r26, 0x05	; 5
    1a74:	9c 91       	ld	r25, X
    1a76:	2e dd       	rcall	.-1444   	; 0x14d4 <_Z11Roomba_Song11song_struct>
	Roomba_Song(prelude_pt_4);
    1a78:	f8 01       	movw	r30, r16
    1a7a:	40 81       	ld	r20, Z
    1a7c:	51 81       	ldd	r21, Z+1	; 0x01
    1a7e:	62 81       	ldd	r22, Z+2	; 0x02
    1a80:	73 81       	ldd	r23, Z+3	; 0x03
    1a82:	84 81       	ldd	r24, Z+4	; 0x04
    1a84:	95 81       	ldd	r25, Z+5	; 0x05
    1a86:	26 dd       	rcall	.-1460   	; 0x14d4 <_Z11Roomba_Song11song_struct>
}
    1a88:	c8 56       	subi	r28, 0x68	; 104
    1a8a:	df 4f       	sbci	r29, 0xFF	; 255
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	1f 91       	pop	r17
    1a9c:	0f 91       	pop	r16
    1a9e:	ff 90       	pop	r15
    1aa0:	ef 90       	pop	r14
    1aa2:	df 90       	pop	r13
    1aa4:	cf 90       	pop	r12
    1aa6:	08 95       	ret

00001aa8 <_Z6r_mainv>:
		Task_Next();
	}
	
}

int r_main(void) {
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
	Roomba_Init();
    1aac:	8b dc       	rcall	.-1770   	; 0x13c4 <_Z11Roomba_Initv>
	setup_songs();
    1aae:	22 df       	rcall	.-444    	; 0x18f4 <_Z11setup_songsv>
	Task_Create_Periodic(pp_handlePacket,0,200,2,0);
    1ab0:	00 e0       	ldi	r16, 0x00	; 0
    1ab2:	10 e0       	ldi	r17, 0x00	; 0
    1ab4:	22 e0       	ldi	r18, 0x02	; 2
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	48 ec       	ldi	r20, 0xC8	; 200
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	89 e3       	ldi	r24, 0x39	; 57
    1ac2:	9c e0       	ldi	r25, 0x0C	; 12
    1ac4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <Task_Create_Periodic>
	Task_Create_Periodic(pp_shoot,0,200,30,100);
    1ac8:	04 e6       	ldi	r16, 0x64	; 100
    1aca:	10 e0       	ldi	r17, 0x00	; 0
    1acc:	2e e1       	ldi	r18, 0x1E	; 30
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	48 ec       	ldi	r20, 0xC8	; 200
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	86 e2       	ldi	r24, 0x26	; 38
    1ada:	9b e0       	ldi	r25, 0x0B	; 11
    1adc:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <Task_Create_Periodic>
	Enable_Interrupt();
    1ae0:	78 94       	sei
	return 0;
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	08 95       	ret

00001aec <_Z16Roomba_Send_Byteh>:
	return uart_buffer_index;
}

void uart_reset_receive(void)
{
	uart_buffer_index = 0;
    1aec:	e8 ec       	ldi	r30, 0xC8	; 200
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	90 81       	ld	r25, Z
    1af2:	95 ff       	sbrs	r25, 5
    1af4:	fd cf       	rjmp	.-6      	; 0x1af0 <_Z16Roomba_Send_Byteh+0x4>
    1af6:	80 93 ce 00 	sts	0x00CE, r24
    1afa:	08 95       	ret

00001afc <_Z16Roomba_UART_Init9_uart_bps>:
    1afc:	2f b7       	in	r18, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	e5 e6       	ldi	r30, 0x65	; 101
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	90 81       	ld	r25, Z
    1b06:	9e 7f       	andi	r25, 0xFE	; 254
    1b08:	90 83       	st	Z, r25
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	69 f0       	breq	.+26     	; 0x1b28 <_Z16Roomba_UART_Init9_uart_bps+0x2c>
    1b0e:	28 f0       	brcs	.+10     	; 0x1b1a <_Z16Roomba_UART_Init9_uart_bps+0x1e>
    1b10:	82 30       	cpi	r24, 0x02	; 2
    1b12:	89 f0       	breq	.+34     	; 0x1b36 <_Z16Roomba_UART_Init9_uart_bps+0x3a>
    1b14:	83 30       	cpi	r24, 0x03	; 3
    1b16:	b1 f0       	breq	.+44     	; 0x1b44 <_Z16Roomba_UART_Init9_uart_bps+0x48>
    1b18:	1c c0       	rjmp	.+56     	; 0x1b52 <_Z16Roomba_UART_Init9_uart_bps+0x56>
    1b1a:	83 e3       	ldi	r24, 0x33	; 51
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	90 93 cd 00 	sts	0x00CD, r25
    1b22:	80 93 cc 00 	sts	0x00CC, r24
    1b26:	1b c0       	rjmp	.+54     	; 0x1b5e <_Z16Roomba_UART_Init9_uart_bps+0x62>
    1b28:	89 e1       	ldi	r24, 0x19	; 25
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	90 93 cd 00 	sts	0x00CD, r25
    1b30:	80 93 cc 00 	sts	0x00CC, r24
    1b34:	14 c0       	rjmp	.+40     	; 0x1b5e <_Z16Roomba_UART_Init9_uart_bps+0x62>
    1b36:	80 e1       	ldi	r24, 0x10	; 16
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	90 93 cd 00 	sts	0x00CD, r25
    1b3e:	80 93 cc 00 	sts	0x00CC, r24
    1b42:	0d c0       	rjmp	.+26     	; 0x1b5e <_Z16Roomba_UART_Init9_uart_bps+0x62>
    1b44:	88 e0       	ldi	r24, 0x08	; 8
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	90 93 cd 00 	sts	0x00CD, r25
    1b4c:	80 93 cc 00 	sts	0x00CC, r24
    1b50:	06 c0       	rjmp	.+12     	; 0x1b5e <_Z16Roomba_UART_Init9_uart_bps+0x62>
    1b52:	80 e1       	ldi	r24, 0x10	; 16
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	90 93 cd 00 	sts	0x00CD, r25
    1b5a:	80 93 cc 00 	sts	0x00CC, r24
    1b5e:	e8 ec       	ldi	r30, 0xC8	; 200
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 e4       	ldi	r24, 0x40	; 64
    1b64:	80 83       	st	Z, r24
    1b66:	88 e0       	ldi	r24, 0x08	; 8
    1b68:	80 93 c9 00 	sts	0x00C9, r24
    1b6c:	86 e0       	ldi	r24, 0x06	; 6
    1b6e:	80 93 ca 00 	sts	0x00CA, r24
    1b72:	80 81       	ld	r24, Z
    1b74:	8d 7f       	andi	r24, 0xFD	; 253
    1b76:	80 83       	st	Z, r24
    1b78:	2f bf       	out	0x3f, r18	; 63
    1b7a:	08 95       	ret

00001b7c <__vector_36>:

/**
 * UART receive byte ISR
 */
ISR(USART1_RX_vect)
{
    1b7c:	1f 92       	push	r1
    1b7e:	0f 92       	push	r0
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	0f 92       	push	r0
    1b84:	11 24       	eor	r1, r1
    1b86:	0b b6       	in	r0, 0x3b	; 59
    1b88:	0f 92       	push	r0
    1b8a:	8f 93       	push	r24
    1b8c:	9f 93       	push	r25
    1b8e:	ef 93       	push	r30
    1b90:	ff 93       	push	r31
    uart_buffer[uart_buffer_index] = UDR1;
    1b92:	e0 91 d8 0c 	lds	r30, 0x0CD8
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 91 ce 00 	lds	r24, 0x00CE
    1b9c:	e7 52       	subi	r30, 0x27	; 39
    1b9e:	f3 4f       	sbci	r31, 0xF3	; 243
    1ba0:	80 83       	st	Z, r24
    uart_buffer_index = (uart_buffer_index + 1) % UART_BUFFER_SIZE;
    1ba2:	80 91 d8 0c 	lds	r24, 0x0CD8
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	01 96       	adiw	r24, 0x01	; 1
    1baa:	8f 71       	andi	r24, 0x1F	; 31
    1bac:	90 78       	andi	r25, 0x80	; 128
    1bae:	80 93 d8 0c 	sts	0x0CD8, r24
}
    1bb2:	ff 91       	pop	r31
    1bb4:	ef 91       	pop	r30
    1bb6:	9f 91       	pop	r25
    1bb8:	8f 91       	pop	r24
    1bba:	0f 90       	pop	r0
    1bbc:	0b be       	out	0x3b, r0	; 59
    1bbe:	0f 90       	pop	r0
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	0f 90       	pop	r0
    1bc4:	1f 90       	pop	r1
    1bc6:	18 95       	reti

00001bc8 <__umulhisi3>:
    1bc8:	a2 9f       	mul	r26, r18
    1bca:	b0 01       	movw	r22, r0
    1bcc:	b3 9f       	mul	r27, r19
    1bce:	c0 01       	movw	r24, r0
    1bd0:	a3 9f       	mul	r26, r19
    1bd2:	70 0d       	add	r23, r0
    1bd4:	81 1d       	adc	r24, r1
    1bd6:	11 24       	eor	r1, r1
    1bd8:	91 1d       	adc	r25, r1
    1bda:	b2 9f       	mul	r27, r18
    1bdc:	70 0d       	add	r23, r0
    1bde:	81 1d       	adc	r24, r1
    1be0:	11 24       	eor	r1, r1
    1be2:	91 1d       	adc	r25, r1
    1be4:	08 95       	ret

00001be6 <_exit>:
    1be6:	f8 94       	cli

00001be8 <__stop_program>:
    1be8:	ff cf       	rjmp	.-2      	; 0x1be8 <__stop_program>
